%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: HCTF NEW LOGO.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Bobolo%%CreationDate: 3/19/09%%BoundingBox: 0 0 474 406%%HiResBoundingBox: 0 0 473.7735 405.7920%%CropBox: 0 0 473.7735 405.7920%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 14764 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD38FF843535131312130C1312130C35135F59AFFD6BFFA8601312%0C130C120C130C120C130C120C130C120C131360FD66FF8435130C131213%0C1312130C1312130C1312130C1312130C13121313AFFD61FF59130C130C%120C130C120C130C120C130C120C130C120C130C120C130C120C1359FD5D%FFAE13130C1312130C1312130C1312130C1312130C1312130C1312130C13%12130C13121313AFFD59FFA8350C130C120C130C120C130C120C130C120C%130C120C130C120C130C120C130C120C130C120C35FD57FF841312130C13%12130C1312130C1312130C1312130C1312130C1312130C1312130C131213%0C1312130C1384FD54FF59130C130C120C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C1359FD52FF3513%0C1312130C1312130C1312130C1312130C1312130C1312130C1312130C13%12130C1312130C1312130C13121359FD50FF13130C120C130C120C130C12%0C130C120C130C120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C1213FD4EFF35130C1312130C1312130C1312130C1312130C13%12130C1312130C1312130C1312130C1312130C1312130C1312130C131213%13FD4CFF12130C120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C130C1259FD4AFF%591312130C1312130C1312130C1312130C1312130C1312130C1312130C13%12130C1312130C1312130C1312130C1312130C1312130C1360FD48FF8412%0C130C120C130C120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C1384FD46FFA813%12130C1312130C1312130C1312130C1312130C1312130C1312130C131213%0C1312130C1312130C1312130C1312130C1312130C1312130C13FD46FF13%0C130C120C130C120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C130C120C35FD44%FF840C1312130C1312130C1312130C1312130C1312130C1312130C131213%0C1312130C1312130C1312130C1312130C1312130C1312130C1312130C13%12AFFD43FF0C120C130C120C130C120C130C120C130C120C130C120C130C%120C130C120C130C120C130C120C130C120C130C120C130C120C130C120C%130C120C1313FD42FF591312130C1312130C1312130C1312130C1312130C%1312130C1312130C1312130C1312130C1312130C1312130C1312130C1312%130C1312130C1312130C1360FD41FF130C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C130C120C130C12%0C130C120C130C120C130C120C130C120C35FD40FF600C1312130C131213%0C1312130C1312130C1312130C1312130C1312130C1312130C1312130C13%12130C1312130C1312130C1312130C1312130C1312130C1312AFFD3FFF12%120C130C120C130C120C130C120C130C120C130C120C130C120C130C120C%130C120C130C120C130C120C130C120C130C120C130C120C130C120C130C%120C1335FD3EFF841312130C1312130C1312130C1312130C1312130C1312%130C1312130C1312130C1312130C1312130C1312130C1312130C1312130C%1312130C1312130C1312130C13FD3EFF590C130C120C130C120C130C120C%130C120C130C120C130C120C130C120C130C120C130C120C130C120C130C%120C130C120C130C120C130C120C131213133512130C84FD3DFF12131213%0C1312130C1312130C1312130C1312130C1312130C1312130C1312130C13%12130C1312130C1312130C1312130C1312130C13123535835E835E84595F%121335FD3CFFA8120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C120C130C120C130C120C130C120C130C120C130C120C130C35%345F3334585F13130C130C120C13FD3CFF6012130C1312130C1312130C13%12130C1312130C1312130C1312130C1312130C1312130C1312130C131213%0C1312130C1312133583343A345F35130C1312130C1312130CFD3CFF1313%0C120C130C120C130C120C130C120C130C120C130C120C130C120C130C12%0C130C120C130C120C130C120C130C120C5F5834115E58130C130C120C13%0C120C130C1259FD3BFF3512130C1312130C1312130C1312130C1312130C%1312130C1312130C1312130C1312130C1312130C1312130C131213598333%3A338313130C1312130C1312130C1312130C60FD3BFF0C130C120C130C12%0C130C120C130C120C130C120C130C120C130C120C130C120C130C120C13%0C120C130C120C355834113A58350C130C120C130C120C130C120C130C12%12FD3BFF130C1312130C1312130C1312130C1312130C1312130C1312130C%1312130C1312130C1312130C1312130C13125F343A333A591312130C1312%130C1312130C1312130C131213FD3AFF600C120C130C120C130C120C130C%120C130C120C130C120C130C120C130C120C130C120C130C120C130C120C%5F3333115E35130C130C120C130C120C130C13355F58AEFFA80CFD3AFF60%130C1312130C1312130C1312130C1312130C1312130C1312130C1312130C%1312130C1312130C131213135F333A338335130C1312130C13121312605F%83345E5F5F13131213FD3AFF8412130C1312130C1312130C1312130C1312%130C1312130C1312130C1312130C1312130C1312130C13355E113A338335%1312130C1312130C35595E333A58AE351312130C1312FD3AFFA8855A7E5A%855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A855A%7E5A855A7E835E333A3383FD085A8483333A3383FD0A5AFD3AFFA95A7E5A%7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7E5A7E7D34113433837E7E5A7E5A7E5A7E593A333358FF5A7E5A7E5A%7E5A7E5A7E5AFD3AFF7E5A305A305A305A305A305A305A305A305A305A30%5A305A305A305A305A305A305A305A305A843A333A33835A5A305A305A5A%AE333A335E83FD0D5AFD3AFFA92F5A2F362F5A2F362F5A2F362F5A2F362F%5A2F362F5A2F362F5A2F362F5A2F362F5A2F5A7D3A3333115E5A362F5A2F%365A5E3333115E5A5A2F5A2F362F5A2F362F5A545A2FFD3BFF7E5A855A7E%5A855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A855A7E5A85%843A333A335EA8855A7E5A857D3A333A338384855A7E5A855A7E5A855983%5E83AEFD3CFF305A2F5A305A2F5A305A2F5A30302F362F302F362F302F36%2F302F362F302F362F305934333311345A5A2F5A307E583433333384305A%2F5A305A5A84585E335E595A2F3630FD3BFF5A305A305A305A305A305A30%5A305A305A305A305A305A305A305A305A305A305A5A5E333A333A5A5A30%5A3084583A333A3384305A305A307E5F5E333A597E305A305A307EFD3BFF%5A362F5A2F362F5A2F362F5A2F362F5A2F362F5A2F362F5A2F362F5A2F36%2F5A5A5E113A3333595A2F362F843433113A337E2F5A2F5A5A5F3333115F%5A362F5A2F362F5A7EFD3BFF85305A305A305A305A305A305A305A305A30%5A305A305A305A305A305A305A5483333A333A585A305A3084333A333A33%84305A305A835E333A3484305A305A305A305A30AFFD3BFF84362F302F36%2F302F362F302F362F302F362F302F362F302F362F302F362F8311343333%335A2F302F8433331134337E2F362F7E34343333585A2F302F362F302F36%2F5AFD3DFF5A7E5A7F5A7E5A7F5A7E5A7F5A7E5A7F5A7E5A7F5A7E5A7F5A%7E5A7F5AA8333A333A33845A7E5AA8333A333A33845A5A5A84333A333A59%855A7F5A855A7F5A855A7E5AFD3DFF7E2F362F5A2F362F5A2F362F5A2F36%2F5A2F362F5A2F362F5A2F362F7E3333113A335E305A3084333A33331183%30362F603333113A595A2F5A2F362F5A2F362F5A2F84FD3DFF845A305A30%5A305A305A305A305A305A305A305A305A305A305A305A583A333A335E5A%5A3084333A333A335F305A5A5F333A333A595A305A305A305A305A305A30%5AFD3FFF2F362F302F362F302F362F302F362F302F362F302F362F302F36%593311343333595A2F7E33343333115E2F30535E3333113459362F362F30%2F362F302F362F305AFD3FFF85305A305A305A305A305A305A305A305A30%5A305A305A305A5A5E333A333A585A305A343A333A335E5A5A5A5E333A33%3A835A305A305A305A305A305A305A30AFFD3FFFA85A2F362F5A2F362F5A%2F362F5A2F362F5A2F362F5A2F362F5F3333113A337E2F5A5833113A3333%595A5A5E113A3333585A2F362F5A2F362F5A2F362F5A2F5AFD41FF5A5A30%5A305A305A305A305A305A305A305A305A305A3084333A333A3383365A5F%3A333A333A585A5A5E333A333A347E305A305A305A305A305A305A305AA9%FD41FFAF2F362F302F362F302F362F302F362F302F362F302F5A33331134%33345A5A7D3411343333335A305E1134333333842F302F362F302F362F30%2F362F305AFD43FFA95A7E5A7F5A7E5A7F5A7E5A7F5A7E5A7F5A7E5A855F%3A333A333A5985845E333A333A33837E84333A333A33837E7E5A7F5A7E5A%7F5A7E5A7F5A7E5AFD45FF5A2F362F5A2F362F5A2F362F5A2F362F5A2F36%593A3333113A337E305F3333113A333454843333113A335E5A5A2F362F5A%2F362F5A2F362F5A2F7EFD45FFA85A305A305A305A305A305A305A305A30%5A5A5E333A333A335F5A84333A333A333A595A333A333A333A7E5A305A30%5A305A305A305A305A305AFD47FF7E362F302F362F302F362F302F362F30%2F84333311343333597E333311343333335A583311343333585A2F302F36%2F302F362F302F362F36A8FD48FF5A5A305A305A305A305A305A305A305A%583A333A333A585A5E3A333A333A335A833A333A333A3385305A305A305A%305A305A305A305AA8FD4AFF5A362F5A2F362F5A2F362F5A2F36593A3333%113A335A7D3A3333113A335E5A5E3333113A335F2F5A2F362F5A2F362F5A%2F362F5A7EFD4CFF5A5A305A305A305A305A305A5A5E333A333A335EFF5E%333A333A333A8383333A333A333A7E5A305A305A305A305A305A305A7EFD%4EFF5A302F362F302F362F302F8433331134333358833333113433333383%333311343333585A2F302F362F302F362F302F367EFD50FF5A5A305A305A%305A305A583A333A333A33FF343A333A333A33AE343A333A333A3385305A%305A305A305A305A305A7EFD52FF5A5A2F362F5A2F36593A3333113A335F%583A3333113A335E5E3A3333113A335E2F5A2F362F5A2F362F5A2F3684FD%54FF7E855A7E5A855A5E333A333A333A833A333A333A333A5E3A333A333A%333AA87E5A855A7E5A855A7E5A85A9FD57FF5A2F302F5A33331134333334%5E3333113433333383333311343333335A2F302F362F302F362F7EFD5AFF%85305A593A333A333A335E333A333A333A335F333A333A333A3383305A30%5A305A305A5AAFFD5DFF7E5E3333113A3333333A3333113A3333343A3333%113A33345A5A2F362F5A2F5A7EFD61FF83583A333A333A333A333A333A33%3A333A333A333A5E5A305A305A5AA9FD65FFA88333343333113433331134%33331134333311A82F305484A8FD6AFFAE835E5F583A333A333A333A333A%5883AF85FD76FFFD0483FDFCFFFDFCFFFDFCFFFD72FFA8FD07FFA8FFFFFF%A8FD07FFA8FFFFFFA8FFFFFF84FD05FFA8FD05FFA8A8FD05FFA8FD50FF7D%F8277DFFA852F852A8FFFF7D27FFFFFF7D272727F8A8FF7DF8277D272752%F82727277DFF277DFF7DF852FD0427F8FD51FF2727FFFFFF7D27A8FFFFFF%2727A8FFFFFFF8527D2752FFFF2752FFA8FF7D2753FF7DA8A82727FFA8FF%FF7DF8A8FF7DFD51FFF852FFFFFFA8F8A8FFFF7D27F852FFFFFF2727FFF8%A8FFFFF87DFFFFFFA8F87DFFFFFF7D27277DFFFFFF52277DFD53FF272752%2E522727A8FFFF7D7D5227FFFFFFF8272727A8FFFF2752FFFFFF842759FF%FFFF27A82752FFFFFF7DF8A8FD53FFF8277DA87D7DF8A8FFFFF8A852277D%FFFF2727A8F827A8FFF87DFFFFFFA8F87DFFFF7D277D52F8FFFFFF52277D%FD53FF2728FFFFFFA8277DFF7D52527D2752FFFFF852FF53F87DFF2753FF%FFFFA82752FFFF52527D522752FFFF7DF8A8FD53FFF852FFFFFFA8F87DFF%277DFFFF52F8A8FF2727FF7D277DFFF87DFFFFFFA8F87DFFA8F8FFFFFF27%27A8FF52277DFD52FF842727A8FFFF52275252F8FFFFFFA827277EF82752%5227FF842727A8FFFF592752A82752A8FFFF7DF87DA852F87DFD52FFA87D%A87DFFA8A87D7D7DA8A8FFFFFF7DA87DA87DA8A8FFFFA87DA8A8FFA8A87D%A87DA87DA8FFFFA8A87DA87DA87DFDFCFFFD64FFA8FD49FFA8FD0427F87D%FFA8FD05277EFFFF2E7DFFFFFFA827277DFF52272727FF52F827F8277D27%F85227527D52F827A8FFFF52F87DFF277DFF5227F827F827F8527D27F8A8%FFA8FD05277DFFFF5252FFFFFFA8272752FFFF7DF827F827F827F852F827%27527DFF7D27F87DFFFF272727FF522727275227F827F827F827A8F87DFF%FFFF7D53A8277DFFFFA852F8A8FF52F87DFFFFFF7D27FFA8277DFF28FFFF%2753FF7DA8A8277DFF2752A82727FFFFFF5252FFA8F852FF7DFFFF5227FF%FF7DFFF852FFFF2752FFFFFF52F87DFF7DF853FFFFFFA827FFFFFF7DFFFF%7DF8FFA87DFF5227FF5227A8FF2827FD04FFF8A8FF2752FF537DA8FFA827%7DFF522727FD05FFA82727FD04FFA82727FF2727F87DFFFF5252FFA8F852%FD04FFF87DFFFFFFA8F8A8FF5227FF5227A8FFA827A8FF5227F8FD04FF7D%F8FD04FF2727FF5227A8FFFFFFA827F8FF5227F853FFFF7D52FD06FF5227%FD04FF2752FFA8F8A8FF52F8FD04FF277DFFF827A8FD04FFA8F8A8FFFF27%27FD06FF2727FD05FF2727FF527D27F8A8FF7D27FFFF27F87DFFFFFF272E%7D52FFA82784FFF87DFFFFF852FF7D52FFA8277D277DFFFFFF5227FD04FF%F852FF52F8FD05FF5227A87D5252F87DFFA82EFD06FF7DF8FD04FF5227FF%5227A8FF2E27FD04FFF8A8FF52F852FD04FFA82784FFFFF852FD06FFF852%FD05FF52F8FF27A8A827F87D7D52FFFFA827F852FFFFF8527D27FFA8F827%2752FFFFFF5220FF27A8FF7D27A82027FFFFFF7DF8FD04FF2727FF2727FD%05FF7DF8A8527DA852F87D7D52FD06FF5227FD04FFFD0427A8FFFF52F8FD%04FF277DFFA852F852A8FFFFA8F8A8FFFF2727FD06FF27F8FD05FF2727FF%527DFFA827F85353FD04FF27F8FFFF2752FFA8FF7D27A85227FFFFFF7D27%5227FFFF27522752F8A8FFFF5227FD04FFF852FF52F8FD05FF5227FF7D53%FFA852F85227FD06FF7DF8FD04FF5228A8F87DFFFF2727FD04FFF8A8FFFF%FF52F87EFFFF7D27A8FFFF522752FD04FF7D522752FFFFFFA82752FF277D%FFFFA827F87DFF7DA8FF5227A8FFF87DFFFFA8A8F8A8A82727FFFFFFF827%7DFF7D27FFFFA82752FFFF52F8FD04FF2727FF7D2727FFFFFFA82752FF52%7DFFFFA827F852FD06FF52277DFFFFFF2752FF52F87DFF7DF8A8FFFF7D27%FFA87DFF7D277DFFFF7DF8A8FFFFFF522727A87D5252FF522752A87D5252%FFFF2752FFFFFFA82759FF52527D2752FFA827277D527D7D277DFFA82727%FFFF7D27FFA85252FFFFFF2E277DFF2727A8FFFFFFF852FFFF522752A87D%522EFFFF5227FD04FF5227FD06FF52F8A8FFFFFF5227FFFF52F87DA82727%7D7D527DFF8427592727FFFFFF52277DFD04FFA87D527D52FFFFFF7D7D52%7DA8FFFF7D527D7DFFFFFFA8A8FFA8527D7DFFFF7D527D527DA87D527DA8%FF7D27F852A8A8FF7D527DA8FFFF7D527D7D7D527DA8FF7D7D527DFFFFA8%7D527D7DFFFFA8527D7DFFFFFFA87DFD05FFA8527D52FFFF7D527D7DFFA8%52F8527DA8527DA8FFFFFF527D7DA8FFFFA87D527DA8FD2EFFA87D272727%5352527DFD34FFA8272727FD0452FD3EFF7DA87DA8FD38FFA8A87DA8A8FD%A8FF522752275252FFA852275220527DFF7D52277DFFFF525252FF27A8FF%FFFFA82752A87D27522752277DA8FD04FF52A8FF52522752275227525252%27A8FFFF522727272EA8FFFF527DFFFFFFA852527DFD31FF2727FFA87DA8%2752FFFFFF27277DFF2752FD04FFF8FFFF5227A8FFFFFF5352FFFF2728FF%7D52F827A8FFFFA8F87DFF7D7DFF5327FFA852FFF852FFFF2752FFFFA852%F87DFF7DF87DFFFFFF7D27FD32FFF852FFFFFF52F8FD04FFA8F827FF5227%FD04FF27FFFF2727F8A8FFFF527DFFFFF852FFFFFF84F852FFFF5227F8FD%04FF7DF8FD04FF2727FF5227A8FFFFFFA827F8FF5227F87DFFFF7D52FD32%FF2727A87DFF2752FD05FF52F8FF2E52FD04FFF8FFFF527D2727A8FF7D59%FFFF272EFD04FF52F8FFFF277D277DFFFFFF5927FD04FFF852FF52F8FD05%FF5227A87D5227F8A8FFA827FD32FFF82752527D2727FD05FF2727FF5227%FD04FF27FFFFF8A87D2727FF527DFFFFF852FD04FF2727FF7D2EFFF852FF%FFFF7DF8FD04FF2727FF2727FD05FF7DF8A8527DA827F87D7D52FD32FF27%28FFA8FF2727A8FD04FF5227FF2727FD04FFF8FFFF27A8FF7D27277D52FF%FF2727FD04FF5227FF27522827F8FFFFFF5227FD04FFF852FF52F8FD05FF%5227FF7D52FFA827F85328FD32FFF852FFFFFF7DF87DFD04FFF852FF52F8%FFFFFF7D27FFFFF8A8FFFF7D27F87DFFFFF852FD04FFF87DA827FFFFA827%52FFFF52F8FD04FF2727FF7D2752FD04FF2727FF527DFFFFA827F852FD31%FFA82727FD04FF52F87DFFFF5252FFFF842752A87D5259FFA8277DFFFFFF%7D2752FFFF2727A8FFA82752A85252FFFFFF2727A8FF2727FD04FFF852FF%FF522752FFA85227FFFF5252FFFFFFA8272EFD31FF7D527D7DFD04FF7D27%522E7DFD04FFA87D2E52A8FFFF7D527DA8FFFFFF7D7EFF7D52522752527E%FFA8527DA8FFFF7D527DA87D527DA8FF7D7D52A8FFFF7D5227527DFFFFFF%527D7DFFFFFFA87DFDFCFFFD1BFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">HCTF LOGO FINAL 1</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2009-03-19T13:49:30-07:00</xap:CreateDate>
         <xap:ModifyDate>2009-03-19T13:50:32-07:00</xap:ModifyDate>
         <xap:MetadataDate>2009-03-19T13:50:32-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>220</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FWE+a/zf8AJ3l5ngNwdQv0BH1W0o/Fh0DyV4Lv13JHhlsMMi6zVdrYcW18Uu4PK9d/&#xA;5yA833jldKig0uGvwkKJ5ae7SDh9yZkR08Rz3dFn7dzS+moj5n7f1MI1Lzl5s1MFb/V7u4jJ5ek0&#xA;z+nXxCAhe/hlogByDrMmryz+qUj8UoZmY1Ylj4k1yTjtBiDUEg+IxVM9P80eZdOr9Q1W7tQ1OSxT&#xA;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&#xA;KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:19EBC70A161F11DEA826CF8E067576A3</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:19EBC70D161F11DEA826CF8E067576A3</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1ECA15F0160211DEA826CF8E067576A3</stRef:instanceID>
            <stRef:documentID>uuid:3698F2A6A5AA11DDA4C8DBC5678ED8B4</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -405.792 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 405.792 li473.773 405.792 li473.773 0 licpclp[1 0 0 1 0 0 ] concat236.971 0.13916 mo288.682 0.13916 331.041 28.3853 351.477 68.0884 cv360.5 85.6255 366.137 109.68 366.008 124.124 cv361.107 124.124 353.154 124.178 341.807 124.178 cv341.807 124.178 347.967 121.405 355.213 119.795 cv364.498 117.733 364.76 117.6 364.115 115.155 cv361.275 113.735 352.895 113.344 340.52 116.186 cv323.549 120.077 315.947 124.124 315.947 124.124 cv283.098 124.09 li297.277 111.844 321.82 94.0083 352.123 91.0396 cv353.799 90.3989 354.055 89.2388 353.539 87.6899 cv350.701 86.6548 349.287 86.8032 346.189 86.7837 cv325.174 86.6548 296.676 97.6196 283.135 106.512 cv272.729 113.354 259.652 124.252 259.133 124.124 cv110.479 124.178 li110.869 105.741 117.057 82.4009 126.475 65.7661 cv150.031 24.1353 193.521 0.13916 236.971 0.13916 cvfalse sop/0 [/DeviceCMYK] /CSA add_res1 0 0.47 0.15 cmykf0.278 lw0 lc0 lj3.864 ml[] 0 dshtrue sadj236.971 0.13916 mo288.682 0.13916 331.041 28.3853 351.477 68.0884 cv360.5 85.6255 366.137 109.68 366.008 124.124 cv361.107 124.124 353.154 124.178 341.807 124.178 cv341.807 124.178 347.967 121.405 355.213 119.795 cv364.498 117.733 364.76 117.6 364.115 115.155 cv361.275 113.735 352.895 113.344 340.52 116.186 cv323.549 120.077 315.947 124.124 315.947 124.124 cv283.098 124.09 li297.277 111.844 321.82 94.0083 352.123 91.0396 cv353.799 90.3989 354.055 89.2388 353.539 87.6899 cv350.701 86.6548 349.287 86.8032 346.189 86.7837 cv325.174 86.6548 296.676 97.6196 283.135 106.512 cv272.729 113.354 259.652 124.252 259.133 124.124 cv110.479 124.178 li110.869 105.741 117.057 82.4009 126.475 65.7661 cv150.031 24.1353 193.521 0.13916 236.971 0.13916 cvcp@339.613 90.397 mo319.627 95.0376 307.084 102.463 292.295 112.833 cv279.783 121.6 269.211 131.79 254.898 150.483 cv239.428 170.596 230.27 185.942 220.211 209.282 cv214.148 223.336 206.287 238.94 207.188 245.389 cv232.076 200.129 252.451 168.534 289.842 141.975 cv309.406 128.075 333.422 119.151 352.121 117.348 cv353.277 117.235 344.387 119.538 345.543 119.538 cv296.162 135.139 257.221 185.688 234.783 248.092 cv237.748 248.608 243.814 232.563 249.611 223.467 cv257.088 211.733 269.342 191.102 286.744 175.883 cv310.857 154.737 329.299 145.327 359.73 141.975 cv320.531 149.452 295.256 184.139 285.975 199.999 cv279.467 211.108 273.852 220.883 269.6 233.006 cv266.762 240.87 261.734 251.448 261.734 253.124 cv260.955 253.896 245.986 256.151 235.943 255.569 cv209.123 254.026 196.615 249.252 181.918 242.68 cv181.918 242.68 194.939 212.377 205.768 195.1 cv227.822 160.284 245.857 136.075 279.783 112.444 cv287.008 107.42 312.152 92.4575 339.613 90.397 cv0.76 0 0.91 0 cmykf339.613 90.397 mo319.627 95.0376 307.084 102.463 292.295 112.833 cv279.783 121.6 269.211 131.79 254.898 150.483 cv239.428 170.596 230.27 185.942 220.211 209.282 cv214.148 223.336 206.287 238.94 207.188 245.389 cv232.076 200.129 252.451 168.534 289.842 141.975 cv309.406 128.075 333.422 119.151 352.121 117.348 cv353.277 117.235 344.387 119.538 345.543 119.538 cv296.162 135.139 257.221 185.688 234.783 248.092 cv237.748 248.608 243.814 232.563 249.611 223.467 cv257.088 211.733 269.342 191.102 286.744 175.883 cv310.857 154.737 329.299 145.327 359.73 141.975 cv320.531 149.452 295.256 184.139 285.975 199.999 cv279.467 211.108 273.852 220.883 269.6 233.006 cv266.762 240.87 261.734 251.448 261.734 253.124 cv260.955 253.896 245.986 256.151 235.943 255.569 cv209.123 254.026 196.615 249.252 181.918 242.68 cv181.918 242.68 194.939 212.377 205.768 195.1 cv227.822 160.284 245.857 136.075 279.783 112.444 cv287.008 107.42 312.152 92.4575 339.613 90.397 cvcp@334.197 127.401 mo366.049 127.401 li366.049 130.887 li362.053 130.887 337.033 130.756 327.236 130.887 cv329.555 129.981 332.264 128.436 334.197 127.401 cv0.69 0.34 0 0 cmykf334.197 127.401 mo366.049 127.401 li366.049 130.887 li362.053 130.887 337.033 130.756 327.236 130.887 cv329.555 129.981 332.264 128.436 334.197 127.401 cvcp@255.543 127.79 mo253.74 129.208 252.705 129.208 251.414 131.012 cv110.35 131.012 li110.35 127.79 li255.543 127.79 licpf255.543 127.79 mo253.74 129.208 252.705 129.208 251.414 131.012 cv110.35 131.012 li110.35 127.79 li255.543 127.79 licp@279.523 127.401 mo308.666 127.401 li305.832 128.95 303.494 130.102 301.949 130.874 cv276.287 130.874 li277.445 129.584 277.721 129.077 279.523 127.401 cvf279.523 127.401 mo308.666 127.401 li305.832 128.95 303.494 130.102 301.949 130.874 cv276.287 130.874 li277.445 129.584 277.721 129.077 279.523 127.401 cvcp@273.078 134.106 mo295.518 134.106 li290.361 137.848 285.844 141.454 284.555 142.231 cv265.727 142.231 li269.471 138.624 270.889 136.428 273.078 134.106 cvf273.078 134.106 mo295.518 134.106 li290.361 137.848 285.844 141.454 284.555 142.231 cv265.727 142.231 li269.471 138.624 270.889 136.428 273.078 134.106 cvcp@321.045 134.364 mo365.92 134.364 li365.656 138.879 li352.51 138.879 340.908 142.1 337.941 142.1 cv309.443 142.1 li311.764 140.557 318.854 135.913 321.045 134.364 cvf321.045 134.364 mo365.92 134.364 li365.656 138.879 li352.51 138.879 340.908 142.1 337.941 142.1 cv309.443 142.1 li311.764 140.557 318.854 135.913 321.045 134.364 cvcp@248.447 133.967 mo243.158 138.87 240.631 142.124 239.727 142.124 cv111.301 142.124 li110.91 138.772 110.611 137.461 110.611 134.106 cv248.447 133.967 licpf248.447 133.967 mo243.158 138.87 240.631 142.124 239.727 142.124 cv111.301 142.124 li110.91 138.772 110.611 137.461 110.611 134.106 cv248.447 133.967 licp@359.342 145.327 mo365.404 144.682 li364.242 150.741 362.178 158.737 361.275 162.862 cv345.543 162.862 337.553 162.733 322.08 162.862 cv331.744 154.866 345.414 147.518 359.342 145.327 cvf359.342 145.327 mo365.404 144.682 li364.242 150.741 362.178 158.737 361.275 162.862 cv345.543 162.862 337.553 162.733 322.08 162.862 cv331.744 154.866 345.414 147.518 359.342 145.327 cvcp@238.135 145.2 mo232.721 151.905 228.721 156.157 223.697 162.86 cv115.512 162.86 li113.58 156.542 112.283 149.067 111.639 145.327 cv238.135 145.2 licpf238.135 145.2 mo232.721 151.905 228.721 156.157 223.697 162.86 cv115.512 162.86 li113.58 156.542 112.283 149.067 111.639 145.327 cv238.135 145.2 licp@262.51 145.327 mo280.043 145.327 li271.789 151.258 267.537 155.772 260.443 162.862 cv249.098 162.862 li253.482 155.512 257.221 152.032 262.51 145.327 cvf262.51 145.327 mo280.043 145.327 li271.789 151.258 267.537 155.772 260.443 162.862 cv249.098 162.862 li253.482 155.512 257.221 152.032 262.51 145.327 cvcp@305.443 145.327 mo329.811 145.327 li319.115 148.678 305.701 156.03 297.834 162.862 cv286.877 162.862 li292.162 156.157 298.865 150.614 305.443 145.327 cvf305.443 145.327 mo329.811 145.327 li319.115 148.678 305.701 156.03 297.834 162.862 cv286.877 162.862 li292.162 156.157 298.865 150.614 305.443 145.327 cvcp@247.85 165.649 mo257.164 165.749 li235.043 192.647 li231.434 192.647 li235.043 184.008 245.787 168.356 247.85 165.649 cvf247.85 165.649 mo257.164 165.749 li235.043 192.647 li231.434 192.647 li235.043 184.008 245.787 168.356 247.85 165.649 cvcp@284.313 165.467 mo295.975 165.467 li290.07 169.688 284.725 174.184 282.197 176.436 cv279.662 178.686 273.475 184.311 267.289 192.749 cv263.9 192.803 li270.609 181.973 276.834 173.461 284.313 165.467 cvf284.313 165.467 mo295.975 165.467 li290.07 169.688 284.725 174.184 282.197 176.436 cv279.662 178.686 273.475 184.311 267.289 192.749 cv263.9 192.803 li270.609 181.973 276.834 173.461 284.313 165.467 cvcp@318.459 165.413 mo360.385 165.467 li357.549 174.622 353.014 184.389 347.727 193.03 cv294.463 193.081 li299.75 185.346 310.854 170.698 318.459 165.413 cvf318.459 165.413 mo360.385 165.467 li357.549 174.622 353.014 184.389 347.727 193.03 cv294.463 193.081 li299.75 185.346 310.854 170.698 318.459 165.413 cvcp@116.156 165.959 mo120.156 165.959 221.443 165.749 221.443 165.749 cv203.447 192.749 li127.881 192.749 li123.631 186.815 118.088 172.661 116.156 165.959 cvf116.156 165.959 mo120.156 165.959 221.443 165.749 221.443 165.749 cv203.447 192.749 li127.881 192.749 li123.631 186.815 118.088 172.661 116.156 165.959 cvcp@201.389 196.131 mo194.166 209.93 191.068 215.729 184.236 230.686 cv162.834 230.815 li162.188 230.819 152.389 222.954 145.168 215.342 cv139.938 209.833 134.848 203.866 130.211 196.131 cv201.389 196.131 licpf201.389 196.131 mo194.166 209.93 191.068 215.729 184.236 230.686 cv162.834 230.815 li162.188 230.819 152.389 222.954 145.168 215.342 cv139.938 209.833 134.848 203.866 130.211 196.131 cv201.389 196.131 licp@292.164 196 mo346.32 196 li342.064 202.577 337.164 209.155 329.811 216.889 cv324.537 222.44 316.014 228.915 313.695 230.717 cv274.037 230.717 li274.295 228.01 286.232 204.514 292.164 196 cvf292.164 196 mo346.32 196 li342.064 202.577 337.164 209.155 329.811 216.889 cv324.537 222.44 316.014 228.915 313.695 230.717 cv274.037 230.717 li274.295 228.01 286.232 204.514 292.164 196 cvcp@272.564 233.911 mo309.311 233.911 li293.453 244.741 274.367 251.057 265.988 252.606 cv268.695 244.87 269.471 242.159 272.564 233.911 cvf272.564 233.911 mo309.311 233.911 li293.453 244.741 274.367 251.057 265.988 252.606 cv268.695 244.87 269.471 242.159 272.564 233.911 cvcp@167.213 234.04 mo182.564 234.04 li181.143 237.004 180.883 239.071 179.465 241.514 cv173.793 238.94 171.34 236.874 167.213 234.04 cvf167.213 234.04 mo182.564 234.04 li181.143 237.004 180.883 239.071 179.465 241.514 cv173.793 238.94 171.34 236.874 167.213 234.04 cvcp@229.498 196 mo229.498 196 232.721 196.131 232.721 196 cv232.721 195.874 220.855 214.311 220.988 214.182 cv221.633 213.147 229.498 196 229.498 196 cvef229.498 196 mo229.498 196 232.721 196.131 232.721 196 cv232.721 195.874 220.855 214.311 220.988 214.182 cv221.633 213.147 229.498 196 229.498 196 cvcp@262.121 196 mo262.121 196 264.311 196.26 264.311 196 cv264.311 195.874 251.807 214.053 251.932 213.924 cv252.578 212.895 262.121 196 262.121 196 cvef262.121 196 mo262.121 196 264.311 196.26 264.311 196 cv264.311 195.874 251.807 214.053 251.932 213.924 cv252.578 212.895 262.121 196 262.121 196 cvcp@176.896 297.712 mo177.016 297.712 177.135 297.632 177.135 297.433 cv177.135 296.593 li177.135 290.513 177.135 289.392 177.057 288.112 cv176.975 286.753 176.656 286.112 175.336 285.831 cv175.016 285.753 174.334 285.712 173.775 285.712 cv173.336 285.712 173.096 285.632 173.096 285.353 cv173.096 285.073 173.375 284.991 173.936 284.991 cv176.096 284.991 178.615 285.112 179.695 285.112 cv180.656 285.112 183.176 284.991 184.736 284.991 cv185.295 284.991 185.576 285.073 185.576 285.353 cv185.576 285.632 185.336 285.712 184.855 285.712 cv184.535 285.712 184.176 285.753 183.695 285.831 cv182.615 286.032 182.295 286.712 182.217 288.112 cv182.135 289.392 182.135 290.513 182.135 296.593 cv182.135 303.632 li182.135 307.312 182.135 310.472 182.336 312.192 cv182.455 313.312 182.695 314.19 183.896 314.351 cv184.455 314.433 185.336 314.511 185.936 314.511 cv186.377 314.511 186.574 314.632 186.574 314.833 cv186.574 315.112 186.256 315.231 185.775 315.231 cv183.176 315.231 180.656 315.112 179.535 315.112 cv178.615 315.112 176.096 315.231 174.535 315.231 cv173.977 315.231 173.695 315.112 173.695 314.833 cv173.695 314.632 173.855 314.511 174.334 314.511 cv174.936 314.511 175.416 314.433 175.775 314.351 cv176.576 314.19 176.775 313.312 176.936 312.151 cv177.135 310.472 177.135 307.312 177.135 303.632 cv177.135 300.112 li177.135 299.952 177.016 299.872 176.896 299.872 cv161.615 299.872 li161.496 299.872 161.377 299.911 161.377 300.112 cv161.377 303.632 li161.377 307.312 161.377 310.472 161.576 312.192 cv161.695 313.312 161.936 314.19 163.137 314.351 cv163.695 314.433 164.576 314.511 165.176 314.511 cv165.615 314.511 165.816 314.632 165.816 314.833 cv165.816 315.112 165.496 315.231 165.016 315.231 cv162.416 315.231 159.895 315.112 158.775 315.112 cv157.855 315.112 155.336 315.231 153.736 315.231 cv153.215 315.231 152.936 315.112 152.936 314.833 cv152.936 314.632 153.096 314.511 153.576 314.511 cv154.176 314.511 154.656 314.433 155.016 314.351 cv155.816 314.19 156.016 313.312 156.176 312.151 cv156.377 310.472 156.377 307.312 156.377 303.632 cv156.377 296.593 li156.377 290.513 156.377 289.392 156.295 288.112 cv156.217 286.753 155.896 286.112 154.576 285.831 cv154.256 285.753 153.576 285.712 153.016 285.712 cv152.576 285.712 152.336 285.632 152.336 285.353 cv152.336 285.073 152.615 284.991 153.176 284.991 cv155.336 284.991 157.855 285.112 158.936 285.112 cv159.895 285.112 162.416 284.991 163.977 284.991 cv164.535 284.991 164.816 285.073 164.816 285.353 cv164.816 285.632 164.576 285.712 164.096 285.712 cv163.775 285.712 163.416 285.753 162.936 285.831 cv161.855 286.032 161.535 286.712 161.455 288.112 cv161.377 289.392 161.377 290.513 161.377 296.593 cv161.377 297.433 li161.377 297.632 161.496 297.712 161.615 297.712 cv176.896 297.712 licp0 0 0 1 cmykf203.016 302.792 mo203.215 302.792 203.256 302.671 203.215 302.552 cv199.615 292.671 li199.576 292.511 199.535 292.312 199.416 292.312 cv199.295 292.312 199.215 292.511 199.176 292.671 cv195.496 302.511 li195.455 302.671 195.496 302.792 195.656 302.792 cv203.016 302.792 licp194.855 304.792 mo194.656 304.792 194.576 304.872 194.496 305.112 cv192.336 310.831 li191.936 311.831 191.736 312.792 191.736 313.272 cv191.736 313.991 192.096 314.511 193.336 314.511 cv193.936 314.511 li194.416 314.511 194.535 314.593 194.535 314.833 cv194.535 315.151 194.295 315.231 193.855 315.231 cv192.576 315.231 190.855 315.112 189.615 315.112 cv189.176 315.112 186.975 315.231 184.895 315.231 cv184.375 315.231 184.137 315.151 184.137 314.833 cv184.137 314.593 184.295 314.511 184.615 314.511 cv184.977 314.511 185.537 314.472 185.855 314.433 cv187.695 314.19 188.455 312.831 189.256 310.831 cv199.295 285.712 li199.775 284.554 200.016 284.112 200.416 284.112 cv200.775 284.112 201.016 284.472 201.416 285.394 cv202.375 287.593 208.775 303.911 211.336 309.991 cv212.855 313.593 214.016 314.151 214.855 314.351 cv215.455 314.472 216.055 314.511 216.535 314.511 cv216.855 314.511 217.057 314.552 217.057 314.833 cv217.057 315.151 216.695 315.231 215.215 315.231 cv213.775 315.231 210.855 315.231 207.654 315.151 cv206.936 315.112 206.455 315.112 206.455 314.833 cv206.455 314.593 206.615 314.511 207.016 314.472 cv207.295 314.392 207.576 314.032 207.375 313.552 cv204.176 305.071 li204.096 304.872 203.977 304.792 203.775 304.792 cv194.855 304.792 licpf229.334 300.472 mo228.494 299.872 227.576 299.593 226.016 299.513 cv225.295 299.472 224.895 299.472 224.295 299.472 cv224.135 299.472 224.055 299.552 224.055 299.751 cv224.055 309.231 li224.055 311.872 224.176 312.552 225.455 313.071 cv226.535 313.511 227.455 313.552 228.375 313.552 cv230.174 313.552 233.215 312.593 233.215 308.433 cv233.215 305.952 232.375 302.593 229.334 300.472 cvcp224.055 297.272 mo224.055 297.593 224.176 297.671 224.334 297.712 cv224.695 297.792 225.295 297.831 226.215 297.831 cv227.535 297.831 228.416 297.671 229.096 297.073 cv230.135 296.233 230.734 294.792 230.734 292.831 cv230.734 290.151 229.176 286.632 225.734 286.632 cv225.174 286.632 224.816 286.632 224.416 286.712 cv224.135 286.792 224.055 286.952 224.055 287.392 cv224.055 297.272 licp219.256 296.593 mo219.256 290.513 219.256 289.392 219.176 288.112 cv219.096 286.753 218.775 286.112 217.455 285.831 cv217.135 285.753 216.455 285.712 215.895 285.712 cv215.455 285.712 215.215 285.632 215.215 285.353 cv215.215 285.073 215.496 284.991 216.096 284.991 cv218.215 284.991 220.734 285.112 221.535 285.112 cv223.494 285.112 225.055 284.991 226.416 284.991 cv233.654 284.991 234.936 288.872 234.936 290.991 cv234.936 294.272 233.057 296.233 230.855 297.991 cv234.135 299.112 238.135 301.952 238.135 306.632 cv238.135 310.911 234.814 315.353 227.455 315.353 cv226.975 315.353 225.816 315.272 224.654 315.231 cv223.455 315.151 222.256 315.112 221.656 315.112 cv221.215 315.112 220.336 315.112 219.375 315.151 cv218.455 315.151 217.416 315.231 216.615 315.231 cv216.096 315.231 215.816 315.112 215.816 314.833 cv215.816 314.632 215.975 314.511 216.455 314.511 cv217.057 314.511 217.535 314.433 217.896 314.351 cv218.695 314.19 218.896 313.312 219.055 312.151 cv219.256 310.472 219.256 307.312 219.256 303.632 cv219.256 296.593 licpf244.736 296.593 mo244.736 290.513 244.736 289.392 244.654 288.112 cv244.576 286.753 244.176 286.073 243.295 285.872 cv242.855 285.753 242.336 285.712 241.855 285.712 cv241.455 285.712 241.215 285.632 241.215 285.312 cv241.215 285.073 241.535 284.991 242.176 284.991 cv243.695 284.991 246.215 285.112 247.375 285.112 cv248.375 285.112 250.734 284.991 252.256 284.991 cv252.775 284.991 253.096 285.073 253.096 285.312 cv253.096 285.632 252.855 285.712 252.455 285.712 cv252.055 285.712 251.734 285.753 251.256 285.831 cv250.174 286.032 249.855 286.712 249.775 288.112 cv249.695 289.392 249.695 290.513 249.695 296.593 cv249.695 303.632 li249.695 307.511 249.695 310.673 249.855 312.392 cv249.975 313.472 250.256 314.19 251.455 314.351 cv252.016 314.433 252.895 314.511 253.494 314.511 cv253.936 314.511 254.135 314.632 254.135 314.833 cv254.135 315.112 253.814 315.231 253.375 315.231 cv250.734 315.231 248.215 315.112 247.135 315.112 cv246.215 315.112 243.695 315.231 242.096 315.231 cv241.574 315.231 241.295 315.112 241.295 314.833 cv241.295 314.632 241.455 314.511 241.936 314.511 cv242.535 314.511 243.016 314.433 243.375 314.351 cv244.176 314.19 244.416 313.511 244.535 312.353 cv244.736 310.673 244.736 307.511 244.736 303.632 cv244.736 296.593 licpf266.135 287.231 mo260.174 287.392 li257.854 287.472 256.895 287.671 256.295 288.552 cv255.895 289.151 255.695 289.632 255.615 289.952 cv255.535 290.272 255.414 290.433 255.174 290.433 cv254.895 290.433 254.814 290.233 254.814 289.792 cv254.814 289.151 255.574 285.513 255.654 285.192 cv255.773 284.673 255.895 284.433 256.135 284.433 cv256.455 284.433 256.854 284.833 257.854 284.911 cv259.014 285.032 260.533 285.112 261.854 285.112 cv277.693 285.112 li278.975 285.112 279.854 284.991 280.453 284.911 cv281.053 284.792 281.373 284.712 281.533 284.712 cv281.814 284.712 281.854 284.952 281.854 285.552 cv281.854 286.392 281.732 289.151 281.732 290.192 cv281.693 290.591 281.615 290.831 281.373 290.831 cv281.053 290.831 280.975 290.632 280.934 290.032 cv280.893 289.593 li280.814 288.552 279.736 287.433 276.176 287.353 cv271.135 287.231 li271.135 303.632 li271.135 307.312 271.135 310.472 271.334 312.192 cv271.455 313.312 271.693 314.19 272.895 314.351 cv273.453 314.433 274.334 314.511 274.936 314.511 cv275.375 314.511 275.576 314.632 275.576 314.833 cv275.576 315.112 275.252 315.231 274.814 315.231 cv272.174 315.231 269.654 315.112 268.533 315.112 cv267.613 315.112 265.094 315.231 263.494 315.231 cv262.975 315.231 262.693 315.112 262.693 314.833 cv262.693 314.632 262.854 314.511 263.334 314.511 cv263.936 314.511 264.412 314.433 264.775 314.351 cv265.576 314.19 265.814 313.312 265.934 312.151 cv266.135 310.472 266.135 307.312 266.135 303.632 cv266.135 287.231 licpf294.574 302.792 mo294.775 302.792 294.814 302.671 294.775 302.552 cv291.176 292.671 li291.135 292.511 291.092 292.312 290.975 292.312 cv290.854 292.312 290.775 292.511 290.734 292.671 cv287.055 302.511 li287.016 302.671 287.055 302.792 287.217 302.792 cv294.574 302.792 licp286.416 304.792 mo286.215 304.792 286.135 304.872 286.053 305.112 cv283.896 310.831 li283.494 311.831 283.295 312.792 283.295 313.272 cv283.295 313.991 283.656 314.511 284.895 314.511 cv285.494 314.511 li285.975 314.511 286.092 314.593 286.092 314.833 cv286.092 315.151 285.854 315.231 285.414 315.231 cv284.135 315.231 282.416 315.112 281.176 315.112 cv280.736 315.112 278.533 315.231 276.455 315.231 cv275.934 315.231 275.695 315.151 275.695 314.833 cv275.695 314.593 275.854 314.511 276.176 314.511 cv276.535 314.511 277.094 314.472 277.416 314.433 cv279.254 314.19 280.014 312.831 280.814 310.831 cv290.854 285.712 li291.334 284.554 291.576 284.112 291.975 284.112 cv292.334 284.112 292.574 284.472 292.973 285.394 cv293.936 287.593 300.336 303.911 302.895 309.991 cv304.412 313.593 305.576 314.151 306.416 314.351 cv307.016 314.472 307.613 314.511 308.096 314.511 cv308.414 314.511 308.615 314.552 308.615 314.833 cv308.615 315.151 308.256 315.231 306.773 315.231 cv305.336 315.231 302.416 315.231 299.213 315.151 cv298.494 315.112 298.014 315.112 298.014 314.833 cv298.014 314.593 298.174 314.511 298.572 314.472 cv298.854 314.392 299.135 314.032 298.936 313.552 cv295.734 305.071 li295.654 304.872 295.537 304.792 295.336 304.792 cv286.416 304.792 licpf313.533 287.231 mo307.576 287.392 li305.256 287.472 304.295 287.671 303.695 288.552 cv303.295 289.151 303.096 289.632 303.018 289.952 cv302.936 290.272 302.816 290.433 302.576 290.433 cv302.295 290.433 302.217 290.233 302.217 289.792 cv302.217 289.151 302.975 285.513 303.057 285.192 cv303.176 284.673 303.295 284.433 303.533 284.433 cv303.857 284.433 304.256 284.833 305.256 284.911 cv306.416 285.032 307.936 285.112 309.256 285.112 cv325.096 285.112 li326.377 285.112 327.256 284.991 327.855 284.911 cv328.455 284.792 328.773 284.712 328.936 284.712 cv329.215 284.712 329.256 284.952 329.256 285.552 cv329.256 286.392 329.135 289.151 329.135 290.192 cv329.096 290.591 329.016 290.831 328.773 290.831 cv328.455 290.831 328.375 290.632 328.334 290.032 cv328.295 289.593 li328.217 288.552 327.135 287.433 323.576 287.353 cv318.533 287.231 li318.533 303.632 li318.533 307.312 318.533 310.472 318.734 312.192 cv318.857 313.312 319.096 314.19 320.297 314.351 cv320.854 314.433 321.734 314.511 322.336 314.511 cv322.775 314.511 322.975 314.632 322.975 314.833 cv322.975 315.112 322.654 315.231 322.217 315.231 cv319.574 315.231 317.055 315.112 315.936 315.112 cv315.014 315.112 312.494 315.231 310.895 315.231 cv310.375 315.231 310.096 315.112 310.096 314.833 cv310.096 314.632 310.256 314.511 310.736 314.511 cv311.338 314.511 311.814 314.433 312.178 314.351 cv312.975 314.19 313.217 313.312 313.334 312.151 cv313.533 310.472 313.533 307.312 313.533 303.632 cv313.533 287.231 licpf4.95898 356.431 mo1.04102 352.991 0 348.511 0 344.632 cv0 341.913 0.839844 337.192 4.67969 333.673 cv7.56055 331.032 11.3594 329.433 17.3203 329.433 cv19.8008 329.433 21.2813 329.593 23.1211 329.833 cv24.6406 330.032 25.9199 330.394 27.1211 330.513 cv27.5605 330.552 27.7207 330.753 27.7207 330.991 cv27.7207 331.312 27.5996 331.792 27.5195 333.192 cv27.4395 334.513 27.4805 336.712 27.4004 337.511 cv27.3594 338.112 27.2813 338.433 26.9199 338.433 cv26.5996 338.433 26.5195 338.112 26.5195 337.552 cv26.4805 336.312 25.959 334.911 24.959 333.872 cv23.6406 332.472 20.5195 331.392 16.8398 331.392 cv13.3613 331.392 11.0801 332.272 9.32031 333.872 cv6.40039 336.552 5.64063 340.353 5.64063 344.231 cv5.64063 353.753 12.8809 358.472 18.2402 358.472 cv21.8008 358.472 23.9609 358.071 25.5605 356.233 cv26.2402 355.472 26.7598 354.312 26.9199 353.593 cv27.041 352.952 27.1211 352.792 27.4395 352.792 cv27.7207 352.792 27.8008 353.071 27.8008 353.392 cv27.8008 353.872 27.3203 357.353 26.9199 358.712 cv26.7207 359.392 26.5605 359.593 25.8809 359.872 cv24.2793 360.513 21.2402 360.792 18.6816 360.792 cv13.1992 360.792 8.59961 359.593 4.95898 356.431 cvcpf57.0801 345.872 mo57.0801 336.913 51.9199 331.353 45.3613 331.353 cv40.7598 331.353 35.5195 333.911 35.5195 343.872 cv35.5195 352.192 40.1191 358.792 47.8008 358.792 cv50.5996 358.792 57.0801 357.433 57.0801 345.872 cvcp30 345.112 mo30 338.272 34.5215 329.433 46.5195 329.433 cv56.4805 329.433 62.6797 335.233 62.6797 344.392 cv62.6797 353.552 56.2813 360.792 46.1211 360.792 cv34.6406 360.792 30 352.192 30 345.112 cvcpf71.2793 354.792 mo71.3594 357.913 71.8789 358.952 72.6797 359.231 cv73.3594 359.472 74.1191 359.511 74.7598 359.511 cv75.1992 359.511 75.4395 359.593 75.4395 359.833 cv75.4395 360.151 75.0801 360.231 74.5195 360.231 cv71.9199 360.231 70.3184 360.112 69.5605 360.112 cv69.1992 360.112 67.3203 360.231 65.2402 360.231 cv64.7188 360.231 64.3594 360.192 64.3594 359.833 cv64.3594 359.593 64.5996 359.511 64.998 359.511 cv65.5195 359.511 66.2402 359.472 66.7988 359.312 cv67.8398 358.991 68 357.831 68.0391 354.351 cv68.4004 330.673 li68.4004 329.872 68.5195 329.312 68.9199 329.312 cv69.3594 329.312 69.7188 329.833 70.4004 330.552 cv70.8789 331.073 76.959 337.593 82.7988 343.392 cv85.5195 346.112 90.9199 351.872 91.5996 352.511 cv91.7988 352.511 li91.3984 334.554 li91.3594 332.112 90.998 331.353 90.0391 330.952 cv89.4395 330.712 88.4785 330.712 87.9199 330.712 cv87.4395 330.712 87.2793 330.593 87.2793 330.353 cv87.2793 330.032 87.7188 329.991 88.3184 329.991 cv90.4004 329.991 92.3203 330.112 93.1602 330.112 cv93.5996 330.112 95.1191 329.991 97.0801 329.991 cv97.5996 329.991 98 330.032 98 330.353 cv98 330.593 97.7598 330.712 97.2793 330.712 cv96.8789 330.712 96.5586 330.712 96.0801 330.831 cv94.959 331.151 94.6387 331.991 94.5996 334.231 cv94.1582 359.472 li94.1582 360.353 94 360.712 93.6387 360.712 cv93.1992 360.712 92.7188 360.272 92.2793 359.833 cv89.7578 357.433 84.6387 352.192 80.4785 348.071 cv76.1191 343.753 71.6797 338.753 70.959 337.993 cv70.8379 337.993 li71.2793 354.792 licpf102.721 359.751 mo102.08 359.472 101.959 359.272 101.959 358.392 cv101.959 356.192 102.119 353.792 102.16 353.151 cv102.199 352.552 102.32 352.112 102.639 352.112 cv103 352.112 103.039 352.472 103.039 352.792 cv103.039 353.312 103.199 354.151 103.4 354.833 cv104.279 357.792 106.639 358.872 109.119 358.872 cv112.721 358.872 114.479 356.431 114.479 354.312 cv114.479 352.353 113.879 350.513 110.559 347.913 cv108.721 346.472 li104.318 343.032 102.799 340.231 102.799 336.991 cv102.799 332.593 106.48 329.433 112.041 329.433 cv114.639 329.433 116.32 329.833 117.359 330.112 cv117.719 330.192 117.92 330.312 117.92 330.593 cv117.92 331.112 117.76 332.272 117.76 335.394 cv117.76 336.272 117.639 336.593 117.32 336.593 cv117.039 336.593 116.92 336.353 116.92 335.872 cv116.92 335.513 116.719 334.272 115.879 333.231 cv115.279 332.472 114.119 331.272 111.52 331.272 cv108.561 331.272 106.76 332.993 106.76 335.394 cv106.76 337.231 107.68 338.632 111 341.151 cv112.119 341.991 li116.959 345.632 118.68 348.392 118.68 352.192 cv118.68 354.513 117.799 357.272 114.92 359.151 cv112.92 360.433 110.68 360.792 108.561 360.792 cv106.24 360.792 104.439 360.513 102.721 359.751 cvcpf126.199 341.593 mo126.199 335.513 126.199 334.392 126.119 333.112 cv126.039 331.753 125.719 331.112 124.398 330.831 cv124.078 330.753 123.398 330.712 122.838 330.712 cv122.398 330.712 122.158 330.632 122.158 330.353 cv122.158 330.073 122.439 329.991 123.039 329.991 cv124.119 329.991 125.279 330.032 126.279 330.032 cv127.318 330.073 128.238 330.112 128.799 330.112 cv130.078 330.112 138.039 330.112 138.799 330.073 cv139.559 329.991 140.199 329.911 140.52 329.833 cv140.719 329.792 140.959 329.673 141.158 329.673 cv141.359 329.673 141.398 329.833 141.398 330.032 cv141.398 330.312 141.199 330.792 141.078 332.632 cv141.039 333.032 140.959 334.792 140.879 335.272 cv140.838 335.472 140.758 335.712 140.479 335.712 cv140.199 335.712 140.119 335.513 140.119 335.151 cv140.119 334.872 140.078 334.192 139.879 333.712 cv139.6 332.993 139.197 332.511 137.199 332.272 cv136.52 332.192 132.318 332.112 131.52 332.112 cv131.318 332.112 131.24 332.231 131.24 332.511 cv131.24 342.632 li131.24 342.913 131.279 343.071 131.52 343.071 cv132.398 343.071 136.998 343.071 137.92 342.991 cv138.879 342.913 139.479 342.792 139.84 342.392 cv140.119 342.073 140.279 341.872 140.479 341.872 cv140.639 341.872 140.758 341.952 140.758 342.192 cv140.758 342.433 140.598 343.071 140.439 345.112 cv140.398 345.913 140.279 347.511 140.279 347.792 cv140.279 348.112 140.279 348.552 139.918 348.552 cv139.639 348.552 139.559 348.392 139.559 348.192 cv139.518 347.792 139.518 347.272 139.398 346.753 cv139.197 345.952 138.639 345.353 137.158 345.192 cv136.398 345.112 132.439 345.071 131.479 345.071 cv131.279 345.071 131.24 345.231 131.24 345.472 cv131.24 348.632 li131.24 349.991 131.199 353.671 131.24 354.833 cv131.318 357.593 131.959 358.192 136.039 358.192 cv137.08 358.192 138.76 358.192 139.799 357.712 cv140.838 357.231 141.318 356.392 141.598 354.751 cv141.678 354.312 141.758 354.151 142.039 354.151 cv142.359 354.151 142.359 354.472 142.359 354.872 cv142.359 355.792 142.039 358.511 141.838 359.312 cv141.559 360.353 141.199 360.353 139.68 360.353 cv136.678 360.353 134.479 360.272 132.76 360.231 cv131.039 360.151 129.799 360.112 128.6 360.112 cv128.158 360.112 127.279 360.112 126.318 360.151 cv125.4 360.151 124.359 360.231 123.559 360.231 cv123.039 360.231 122.76 360.112 122.76 359.833 cv122.76 359.632 122.92 359.511 123.398 359.511 cv124 359.511 124.479 359.433 124.84 359.351 cv125.639 359.19 125.838 358.312 125.998 357.151 cv126.199 355.472 126.199 352.312 126.199 348.632 cv126.199 341.593 licpf170.496 333.911 mo169.576 331.712 168.896 331.272 167.457 330.872 cv166.855 330.712 166.217 330.712 165.896 330.712 cv165.537 330.712 165.416 330.593 165.416 330.353 cv165.416 330.032 165.855 329.991 166.457 329.991 cv168.576 329.991 170.855 330.112 172.256 330.112 cv173.256 330.112 175.176 329.991 177.176 329.991 cv177.656 329.991 178.096 330.073 178.096 330.353 cv178.096 330.632 177.855 330.712 177.496 330.712 cv176.855 330.712 176.256 330.753 175.936 330.991 cv175.656 331.192 175.537 331.472 175.537 331.831 cv175.537 332.353 175.896 333.472 176.457 334.911 cv183.336 353.071 li183.496 353.071 li185.217 348.671 190.416 335.792 191.377 333.153 cv191.576 332.632 191.736 332.032 191.736 331.671 cv191.736 331.353 191.576 331.032 191.217 330.913 cv190.736 330.753 190.135 330.712 189.615 330.712 cv189.256 330.712 188.936 330.673 188.936 330.394 cv188.936 330.073 189.295 329.991 190.057 329.991 cv192.057 329.991 193.736 330.112 194.256 330.112 cv194.936 330.112 196.814 329.991 198.016 329.991 cv198.535 329.991 198.855 330.073 198.855 330.353 cv198.855 330.632 198.615 330.712 198.215 330.712 cv197.816 330.712 196.975 330.712 196.256 331.192 cv195.736 331.552 195.135 332.231 194.055 334.792 cv192.496 338.552 191.416 340.712 189.256 345.632 cv186.695 351.472 184.816 355.831 183.936 357.831 cv182.896 360.151 182.656 360.792 182.096 360.792 cv181.576 360.792 181.336 360.231 180.576 358.351 cv170.496 333.911 licpf208.695 347.792 mo208.896 347.792 208.936 347.671 208.896 347.552 cv205.295 337.671 li205.256 337.511 205.215 337.312 205.096 337.312 cv204.977 337.312 204.895 337.511 204.855 337.671 cv201.176 347.511 li201.135 347.671 201.176 347.792 201.336 347.792 cv208.695 347.792 licp200.537 349.792 mo200.336 349.792 200.256 349.872 200.176 350.112 cv198.016 355.831 li197.615 356.831 197.416 357.792 197.416 358.272 cv197.416 358.991 197.775 359.511 199.016 359.511 cv199.615 359.511 li200.096 359.511 200.215 359.593 200.215 359.833 cv200.215 360.151 199.977 360.231 199.535 360.231 cv198.256 360.231 196.535 360.112 195.295 360.112 cv194.855 360.112 192.654 360.231 190.576 360.231 cv190.055 360.231 189.816 360.151 189.816 359.833 cv189.816 359.593 189.977 359.511 190.295 359.511 cv190.656 359.511 191.217 359.472 191.535 359.433 cv193.375 359.19 194.137 357.831 194.936 355.831 cv204.977 330.712 li205.455 329.554 205.695 329.112 206.096 329.112 cv206.455 329.112 206.695 329.472 207.096 330.394 cv208.057 332.593 214.455 348.911 217.016 354.991 cv218.535 358.593 219.695 359.151 220.535 359.351 cv221.135 359.472 221.734 359.511 222.217 359.511 cv222.535 359.511 222.736 359.552 222.736 359.833 cv222.736 360.151 222.375 360.231 220.895 360.231 cv219.455 360.231 216.535 360.231 213.336 360.151 cv212.615 360.112 212.135 360.112 212.135 359.833 cv212.135 359.593 212.295 359.511 212.695 359.472 cv212.975 359.392 213.256 359.032 213.057 358.552 cv209.855 350.071 li209.775 349.872 209.656 349.792 209.455 349.792 cv200.537 349.792 licpf227.656 332.231 mo221.697 332.392 li219.377 332.472 218.416 332.671 217.816 333.552 cv217.416 334.151 217.217 334.632 217.137 334.952 cv217.057 335.272 216.936 335.433 216.697 335.433 cv216.416 335.433 216.338 335.233 216.338 334.792 cv216.338 334.151 217.096 330.513 217.178 330.192 cv217.297 329.673 217.416 329.433 217.656 329.433 cv217.977 329.433 218.377 329.833 219.377 329.911 cv220.537 330.032 222.057 330.112 223.377 330.112 cv239.217 330.112 li240.496 330.112 241.377 329.991 241.977 329.911 cv242.576 329.792 242.896 329.712 243.057 329.712 cv243.336 329.712 243.377 329.952 243.377 330.552 cv243.377 331.392 243.256 334.151 243.256 335.192 cv243.217 335.591 243.137 335.831 242.896 335.831 cv242.576 335.831 242.496 335.632 242.457 335.032 cv242.416 334.593 li242.336 333.552 241.256 332.433 237.697 332.353 cv232.656 332.231 li232.656 348.632 li232.656 352.312 232.656 355.472 232.857 357.192 cv232.977 358.312 233.217 359.19 234.416 359.351 cv234.977 359.433 235.855 359.511 236.457 359.511 cv236.896 359.511 237.096 359.632 237.096 359.833 cv237.096 360.112 236.775 360.231 236.338 360.231 cv233.697 360.231 231.178 360.112 230.057 360.112 cv229.137 360.112 226.617 360.231 225.016 360.231 cv224.496 360.231 224.217 360.112 224.217 359.833 cv224.217 359.632 224.377 359.511 224.855 359.511 cv225.457 359.511 225.936 359.433 226.297 359.351 cv227.096 359.19 227.336 358.312 227.457 357.151 cv227.656 355.472 227.656 352.312 227.656 348.632 cv227.656 332.231 licpf248.736 341.593 mo248.736 335.513 248.736 334.392 248.654 333.112 cv248.576 331.753 248.176 331.073 247.295 330.872 cv246.855 330.753 246.336 330.712 245.855 330.712 cv245.455 330.712 245.215 330.632 245.215 330.312 cv245.215 330.073 245.535 329.991 246.176 329.991 cv247.695 329.991 250.215 330.112 251.377 330.112 cv252.375 330.112 254.736 329.991 256.256 329.991 cv256.775 329.991 257.096 330.073 257.096 330.312 cv257.096 330.632 256.855 330.712 256.455 330.712 cv256.055 330.712 255.734 330.753 255.256 330.831 cv254.176 331.032 253.855 331.712 253.775 333.112 cv253.695 334.392 253.695 335.513 253.695 341.593 cv253.695 348.632 li253.695 352.511 253.695 355.673 253.855 357.392 cv253.975 358.472 254.256 359.19 255.455 359.351 cv256.016 359.433 256.895 359.511 257.496 359.511 cv257.936 359.511 258.135 359.632 258.135 359.833 cv258.135 360.112 257.814 360.231 257.375 360.231 cv254.736 360.231 252.217 360.112 251.135 360.112 cv250.215 360.112 247.695 360.231 246.096 360.231 cv245.576 360.231 245.295 360.112 245.295 359.833 cv245.295 359.632 245.455 359.511 245.936 359.511 cv246.535 359.511 247.016 359.433 247.375 359.351 cv248.176 359.19 248.416 358.511 248.535 357.353 cv248.736 355.673 248.736 352.511 248.736 348.632 cv248.736 341.593 licpf287.135 345.872 mo287.135 336.913 281.977 331.353 275.414 331.353 cv270.814 331.353 265.576 333.911 265.576 343.872 cv265.576 352.192 270.174 358.792 277.855 358.792 cv280.656 358.792 287.135 357.433 287.135 345.872 cvcp260.055 345.112 mo260.055 338.272 264.574 329.433 276.576 329.433 cv286.535 329.433 292.732 335.233 292.732 344.392 cv292.732 353.552 286.334 360.792 276.176 360.792 cv264.697 360.792 260.055 352.192 260.055 345.112 cvcpf301.338 354.792 mo301.416 357.913 301.936 358.952 302.736 359.231 cv303.416 359.472 304.174 359.511 304.816 359.511 cv305.256 359.511 305.498 359.593 305.498 359.833 cv305.498 360.151 305.135 360.231 304.574 360.231 cv301.977 360.231 300.375 360.112 299.615 360.112 cv299.256 360.112 297.377 360.231 295.297 360.231 cv294.775 360.231 294.416 360.192 294.416 359.833 cv294.416 359.593 294.658 359.511 295.055 359.511 cv295.576 359.511 296.295 359.472 296.854 359.312 cv297.895 358.991 298.057 357.831 298.096 354.351 cv298.455 330.673 li298.455 329.872 298.576 329.312 298.977 329.312 cv299.416 329.312 299.775 329.833 300.455 330.552 cv300.936 331.073 307.016 337.593 312.855 343.392 cv315.576 346.112 320.975 351.872 321.654 352.511 cv321.854 352.511 li321.455 334.554 li321.416 332.112 321.053 331.353 320.096 330.952 cv319.496 330.712 318.533 330.712 317.975 330.712 cv317.494 330.712 317.336 330.593 317.336 330.353 cv317.336 330.032 317.775 329.991 318.375 329.991 cv320.455 329.991 322.377 330.112 323.217 330.112 cv323.656 330.112 325.174 329.991 327.135 329.991 cv327.654 329.991 328.057 330.032 328.057 330.353 cv328.057 330.593 327.816 330.712 327.336 330.712 cv326.936 330.712 326.615 330.712 326.137 330.831 cv325.014 331.151 324.697 331.991 324.654 334.231 cv324.215 359.472 li324.215 360.353 324.057 360.712 323.695 360.712 cv323.256 360.712 322.775 360.272 322.336 359.833 cv319.814 357.433 314.697 352.192 310.537 348.071 cv306.176 343.753 301.736 338.753 301.014 337.993 cv300.895 337.993 li301.338 354.792 licpf350.295 332.231 mo344.334 332.392 li342.016 332.472 341.053 332.671 340.453 333.552 cv340.053 334.151 339.855 334.632 339.775 334.952 cv339.697 335.272 339.574 335.433 339.334 335.433 cv339.055 335.433 338.975 335.233 338.975 334.792 cv338.975 334.151 339.736 330.513 339.814 330.192 cv339.936 329.673 340.053 329.433 340.295 329.433 cv340.615 329.433 341.014 329.833 342.016 329.911 cv343.174 330.032 344.693 330.112 346.014 330.112 cv361.854 330.112 li363.135 330.112 364.014 329.991 364.613 329.911 cv365.213 329.792 365.533 329.712 365.693 329.712 cv365.975 329.712 366.014 329.952 366.014 330.552 cv366.014 331.392 365.893 334.151 365.893 335.192 cv365.854 335.591 365.775 335.831 365.533 335.831 cv365.213 335.831 365.135 335.632 365.094 335.032 cv365.053 334.593 li364.975 333.552 363.896 332.433 360.336 332.353 cv355.295 332.231 li355.295 348.632 li355.295 352.312 355.295 355.472 355.494 357.192 cv355.615 358.312 355.854 359.19 357.055 359.351 cv357.613 359.433 358.494 359.511 359.096 359.511 cv359.535 359.511 359.736 359.632 359.736 359.833 cv359.736 360.112 359.412 360.231 358.975 360.231 cv356.334 360.231 353.814 360.112 352.693 360.112 cv351.773 360.112 349.254 360.231 347.654 360.231 cv347.133 360.231 346.854 360.112 346.854 359.833 cv346.854 359.632 347.016 359.511 347.494 359.511 cv348.096 359.511 348.572 359.433 348.936 359.351 cv349.736 359.19 349.975 358.312 350.094 357.151 cv350.295 355.472 350.295 352.312 350.295 348.632 cv350.295 332.231 licpf376.092 344.751 mo376.092 345.192 376.176 345.353 376.455 345.472 cv377.295 345.751 378.494 345.872 379.496 345.872 cv381.092 345.872 381.615 345.712 382.334 345.192 cv383.533 344.312 384.693 342.472 384.693 339.192 cv384.693 333.513 380.934 331.872 378.572 331.872 cv377.574 331.872 376.854 331.913 376.455 332.032 cv376.176 332.112 376.092 332.272 376.092 332.593 cv376.092 344.751 licp379.895 347.792 mo376.416 347.712 li376.416 347.712 376.092 347.792 376.092 348.032 cv376.092 348.593 li376.092 352.312 376.092 355.472 376.293 357.151 cv376.416 358.312 376.654 359.19 377.855 359.351 cv378.455 359.433 379.334 359.511 379.814 359.511 cv380.135 359.511 380.295 359.632 380.295 359.833 cv380.295 360.112 380.014 360.231 379.496 360.231 cv377.174 360.231 374.213 360.112 373.615 360.112 cv372.855 360.112 370.336 360.231 368.734 360.231 cv368.215 360.231 367.934 360.112 367.934 359.833 cv367.934 359.632 368.096 359.511 368.572 359.511 cv369.174 359.511 369.654 359.433 370.014 359.351 cv370.814 359.19 371.014 358.312 371.176 357.151 cv371.377 355.472 371.377 352.312 371.377 348.632 cv371.377 341.593 li371.377 335.513 371.377 334.392 371.293 333.112 cv371.215 331.753 370.895 331.112 369.574 330.831 cv369.254 330.753 368.572 330.712 368.014 330.712 cv367.574 330.712 367.334 330.632 367.334 330.353 cv367.334 330.073 367.615 329.991 368.215 329.991 cv370.336 329.991 372.855 330.112 373.695 330.112 cv375.055 330.112 378.096 329.991 379.334 329.991 cv381.854 329.991 384.535 330.233 386.693 331.712 cv387.814 332.472 389.412 334.513 389.412 337.192 cv389.412 340.151 388.174 342.872 384.135 346.151 cv383.451 346.745 li379.895 347.792 lif397.654 341.593 mo397.654 335.513 397.654 334.392 397.572 333.112 cv397.494 331.753 397.174 331.112 395.854 330.831 cv395.533 330.753 394.854 330.712 394.293 330.712 cv393.854 330.712 393.611 330.632 393.611 330.353 cv393.611 330.073 393.896 329.991 394.494 329.991 cv396.615 329.991 399.135 330.112 400.334 330.112 cv401.293 330.112 403.813 329.991 405.252 329.991 cv405.854 329.991 406.135 330.073 406.135 330.353 cv406.135 330.632 405.893 330.712 405.492 330.712 cv405.053 330.712 404.814 330.753 404.334 330.831 cv403.254 331.032 402.934 331.712 402.855 333.112 cv402.771 334.392 402.771 335.513 402.771 341.593 cv402.771 347.192 li402.771 352.991 403.936 355.433 405.893 357.032 cv407.693 358.511 409.535 358.671 410.893 358.671 cv412.654 358.671 414.814 358.112 416.416 356.513 cv418.611 354.312 418.734 350.712 418.734 346.593 cv418.734 341.593 li418.734 335.513 418.734 334.392 418.654 333.112 cv418.572 331.753 418.254 331.112 416.932 330.831 cv416.615 330.753 415.934 330.712 415.492 330.712 cv415.053 330.712 414.814 330.632 414.814 330.353 cv414.814 330.073 415.094 329.991 415.654 329.991 cv417.693 329.991 420.213 330.112 420.252 330.112 cv420.734 330.112 423.254 329.991 424.814 329.991 cv425.375 329.991 425.654 330.073 425.654 330.353 cv425.654 330.632 425.414 330.712 424.934 330.712 cv424.494 330.712 424.252 330.753 423.773 330.831 cv422.693 331.032 422.373 331.712 422.295 333.112 cv422.213 334.392 422.213 335.513 422.213 341.593 cv422.213 345.872 li422.213 350.312 421.773 355.03 418.412 357.913 cv415.576 360.353 412.693 360.792 410.094 360.792 cv407.973 360.792 404.135 360.673 401.215 358.032 cv399.174 356.192 397.654 353.231 397.654 347.433 cv397.654 341.593 licpf429.254 359.751 mo428.611 359.472 428.494 359.272 428.494 358.392 cv428.494 356.192 428.654 353.792 428.695 353.151 cv428.734 352.552 428.854 352.112 429.174 352.112 cv429.535 352.112 429.574 352.472 429.574 352.792 cv429.574 353.312 429.736 354.151 429.936 354.833 cv430.814 357.792 433.174 358.872 435.654 358.872 cv439.254 358.872 441.014 356.431 441.014 354.312 cv441.014 352.353 440.414 350.513 437.094 347.913 cv435.252 346.472 li430.854 343.032 429.334 340.231 429.334 336.991 cv429.334 332.593 433.014 329.433 438.572 329.433 cv441.174 329.433 442.855 329.833 443.896 330.112 cv444.254 330.192 444.451 330.312 444.451 330.593 cv444.451 331.112 444.293 332.272 444.293 335.394 cv444.293 336.272 444.174 336.593 443.854 336.593 cv443.572 336.593 443.453 336.353 443.453 335.872 cv443.453 335.513 443.254 334.272 442.414 333.231 cv441.814 332.472 440.654 331.272 438.057 331.272 cv435.094 331.272 433.295 332.993 433.295 335.394 cv433.295 337.231 434.213 338.632 437.533 341.151 cv438.654 341.991 li443.494 345.632 445.213 348.392 445.213 352.192 cv445.213 354.513 444.334 357.272 441.455 359.151 cv439.451 360.433 437.213 360.792 435.094 360.792 cv432.771 360.792 430.975 360.513 429.254 359.751 cvcpf458.053 332.231 mo452.094 332.392 li449.775 332.472 448.813 332.671 448.213 333.552 cv447.811 334.151 447.613 334.632 447.533 334.952 cv447.455 335.272 447.334 335.433 447.094 335.433 cv446.813 335.433 446.732 335.233 446.732 334.792 cv446.732 334.151 447.494 330.513 447.572 330.192 cv447.693 329.673 447.811 329.433 448.053 329.433 cv448.373 329.433 448.773 329.833 449.775 329.911 cv450.932 330.032 452.453 330.112 453.773 330.112 cv469.613 330.112 li470.893 330.112 471.771 329.991 472.373 329.911 cv472.973 329.792 473.293 329.712 473.451 329.712 cv473.734 329.712 473.773 329.952 473.773 330.552 cv473.773 331.392 473.65 334.151 473.65 335.192 cv473.611 335.591 473.533 335.831 473.293 335.831 cv472.973 335.831 472.895 335.632 472.854 335.032 cv472.811 334.593 li472.732 333.552 471.654 332.433 468.096 332.353 cv463.053 332.231 li463.053 348.632 li463.053 352.312 463.053 355.472 463.254 357.192 cv463.373 358.312 463.611 359.19 464.814 359.351 cv465.373 359.433 466.254 359.511 466.854 359.511 cv467.295 359.511 467.494 359.632 467.494 359.833 cv467.494 360.112 467.172 360.231 466.732 360.231 cv464.094 360.231 461.574 360.112 460.453 360.112 cv459.533 360.112 457.014 360.231 455.414 360.231 cv454.893 360.231 454.613 360.112 454.613 359.833 cv454.613 359.632 454.775 359.511 455.252 359.511 cv455.854 359.511 456.332 359.433 456.693 359.351 cv457.494 359.19 457.732 358.312 457.854 357.151 cv458.053 355.472 458.053 352.312 458.053 348.632 cv458.053 332.231 licpf101.838 393.632 mo101.838 397.472 101.838 400.472 102.037 402.151 cv102.158 403.312 102.396 404.19 103.596 404.351 cv104.156 404.433 105.037 404.511 105.598 404.511 cv106.117 404.511 106.277 404.632 106.277 404.833 cv106.277 405.112 105.996 405.231 105.396 405.231 cv102.877 405.231 100.357 405.112 99.3164 405.112 cv98.2773 405.112 95.7578 405.231 94.2363 405.231 cv93.6777 405.231 93.3965 405.151 93.3965 404.833 cv93.3965 404.632 93.5566 404.511 93.9961 404.511 cv94.5977 404.511 95.0762 404.433 95.4375 404.351 cv96.2363 404.19 96.4375 403.312 96.5977 402.151 cv96.7969 400.472 96.7969 397.472 96.7969 393.632 cv96.7969 386.593 li96.7969 380.513 96.7969 379.392 96.7168 378.112 cv96.6367 376.753 96.3184 376.112 94.9961 375.831 cv94.6777 375.753 93.9961 375.712 93.4355 375.712 cv93.0371 375.712 92.7559 375.632 92.7559 375.394 cv92.7559 375.073 93.0762 374.991 93.6777 374.991 cv94.7168 374.991 95.877 375.032 96.916 375.032 cv97.957 375.073 98.877 375.112 99.4375 375.112 cv100.957 375.112 109.076 375.112 109.996 375.073 cv110.758 375.032 111.236 375.032 111.637 374.911 cv111.877 374.833 112.076 374.673 112.277 374.673 cv112.438 374.673 112.557 374.833 112.557 375.032 cv112.557 375.312 112.355 375.792 112.236 376.831 cv112.197 377.231 112.117 379.593 112.037 380.071 cv111.998 380.394 111.916 380.632 111.637 380.632 cv111.357 380.632 111.277 380.433 111.236 379.991 cv111.236 379.673 111.236 379.032 110.996 378.472 cv110.717 377.913 109.877 377.313 108.357 377.272 cv102.197 377.151 li101.957 377.151 101.838 377.272 101.838 377.712 cv101.838 387.712 li101.838 387.952 101.877 388.071 102.117 388.071 cv107.236 388.032 li107.916 388.032 108.477 388.032 109.037 387.991 cv109.797 387.952 110.357 387.792 110.758 387.272 cv110.957 387.032 111.037 386.872 111.277 386.872 cv111.438 386.872 111.516 386.991 111.516 387.231 cv111.516 387.472 111.318 388.472 111.197 389.712 cv111.117 390.513 111.037 392.353 111.037 392.632 cv111.037 392.991 111.037 393.392 110.637 393.392 cv110.396 393.392 110.316 393.112 110.316 392.831 cv110.316 392.552 110.236 392.073 110.076 391.593 cv109.877 391.032 109.275 390.312 108.037 390.151 cv107.037 390.032 102.797 390.032 102.117 390.032 cv101.916 390.032 101.838 390.112 101.838 390.394 cv101.838 393.632 licpf142.396 390.872 mo142.396 381.913 137.236 376.353 130.676 376.353 cv126.076 376.353 120.836 378.911 120.836 388.872 cv120.836 397.192 125.436 403.792 133.117 403.792 cv135.916 403.792 142.396 402.433 142.396 390.872 cvcp115.316 390.112 mo115.316 383.272 119.836 374.433 131.836 374.433 cv141.795 374.433 147.996 380.233 147.996 389.392 cv147.996 398.552 141.596 405.792 131.438 405.792 cv119.957 405.792 115.316 397.192 115.316 390.112 cvcpf153.037 386.593 mo153.037 380.513 153.037 379.392 152.955 378.112 cv152.877 376.753 152.557 376.112 151.236 375.831 cv150.916 375.753 150.236 375.712 149.676 375.712 cv149.236 375.712 148.996 375.632 148.996 375.353 cv148.996 375.073 149.275 374.991 149.875 374.991 cv151.996 374.991 154.516 375.112 155.715 375.112 cv156.676 375.112 159.195 374.991 160.637 374.991 cv161.236 374.991 161.516 375.073 161.516 375.353 cv161.516 375.632 161.275 375.712 160.875 375.712 cv160.436 375.712 160.195 375.753 159.717 375.831 cv158.635 376.032 158.316 376.712 158.236 378.112 cv158.156 379.392 158.156 380.513 158.156 386.593 cv158.156 392.192 li158.156 397.991 159.314 400.433 161.275 402.032 cv163.076 403.511 164.916 403.671 166.275 403.671 cv168.037 403.671 170.195 403.112 171.795 401.513 cv173.996 399.312 174.115 395.712 174.115 391.593 cv174.115 386.593 li174.115 380.513 174.115 379.392 174.035 378.112 cv173.955 376.753 173.635 376.112 172.316 375.831 cv171.996 375.753 171.316 375.712 170.875 375.712 cv170.436 375.712 170.195 375.632 170.195 375.353 cv170.195 375.073 170.477 374.991 171.035 374.991 cv173.076 374.991 175.596 375.112 175.637 375.112 cv176.115 375.112 178.635 374.991 180.195 374.991 cv180.756 374.991 181.035 375.073 181.035 375.353 cv181.035 375.632 180.797 375.712 180.314 375.712 cv179.875 375.712 179.635 375.753 179.156 375.831 cv178.076 376.032 177.756 376.712 177.676 378.112 cv177.596 379.392 177.596 380.513 177.596 386.593 cv177.596 390.872 li177.596 395.312 177.156 400.03 173.795 402.913 cv170.955 405.353 168.076 405.792 165.477 405.792 cv163.355 405.792 159.516 405.673 156.596 403.032 cv154.557 401.192 153.037 398.231 153.037 392.433 cv153.037 386.593 licpf189.076 399.792 mo189.156 402.913 189.676 403.952 190.477 404.231 cv191.156 404.472 191.916 404.511 192.557 404.511 cv192.996 404.511 193.236 404.593 193.236 404.833 cv193.236 405.151 192.877 405.231 192.316 405.231 cv189.717 405.231 188.115 405.112 187.355 405.112 cv186.996 405.112 185.115 405.231 183.037 405.231 cv182.516 405.231 182.156 405.192 182.156 404.833 cv182.156 404.593 182.396 404.511 182.795 404.511 cv183.316 404.511 184.035 404.472 184.596 404.312 cv185.637 403.991 185.797 402.831 185.836 399.351 cv186.197 375.673 li186.197 374.872 186.316 374.312 186.717 374.312 cv187.156 374.312 187.516 374.833 188.195 375.552 cv188.676 376.073 194.756 382.593 200.596 388.392 cv203.316 391.112 208.717 396.872 209.396 397.511 cv209.596 397.511 li209.195 379.554 li209.156 377.112 208.795 376.353 207.836 375.952 cv207.236 375.712 206.275 375.712 205.715 375.712 cv205.236 375.712 205.076 375.593 205.076 375.353 cv205.076 375.032 205.516 374.991 206.115 374.991 cv208.195 374.991 210.115 375.112 210.955 375.112 cv211.396 375.112 212.916 374.991 214.875 374.991 cv215.396 374.991 215.797 375.032 215.797 375.353 cv215.797 375.593 215.557 375.712 215.076 375.712 cv214.676 375.712 214.355 375.712 213.877 375.831 cv212.756 376.151 212.436 376.991 212.395 379.231 cv211.955 404.472 li211.955 405.353 211.795 405.712 211.436 405.712 cv210.994 405.712 210.516 405.272 210.076 404.833 cv207.555 402.433 202.436 397.192 198.275 393.071 cv193.916 388.753 189.477 383.753 188.756 382.993 cv188.635 382.993 li189.076 399.792 licpf227.715 390.991 mo227.715 395.231 227.756 398.312 227.795 399.071 cv227.834 400.071 227.916 401.671 228.234 402.112 cv228.756 402.872 230.314 403.712 233.475 403.712 cv237.555 403.712 240.275 402.913 242.674 400.831 cv245.234 398.632 246.033 394.991 246.033 390.872 cv246.033 385.792 243.916 382.511 242.195 380.872 cv238.514 377.353 233.955 376.872 230.836 376.872 cv230.035 376.872 228.555 376.991 228.234 377.151 cv227.875 377.313 227.756 377.511 227.756 377.952 cv227.715 379.312 227.715 382.792 227.715 385.952 cv227.715 390.991 licp222.715 386.593 mo222.715 380.513 222.715 379.392 222.635 378.112 cv222.555 376.753 222.236 376.112 220.914 375.831 cv220.596 375.753 219.914 375.712 219.354 375.712 cv218.916 375.712 218.674 375.632 218.674 375.353 cv218.674 375.073 218.955 374.991 219.555 374.991 cv221.676 374.991 224.195 375.112 225.314 375.112 cv226.555 375.112 229.074 374.991 231.475 374.991 cv236.475 374.991 243.154 374.991 247.516 379.554 cv249.514 381.632 251.395 384.952 251.395 389.712 cv251.395 394.751 249.275 398.593 247.035 400.872 cv245.193 402.753 241.033 405.591 233.635 405.591 cv232.195 405.591 230.555 405.472 229.035 405.353 cv227.516 405.231 226.115 405.112 225.115 405.112 cv224.674 405.112 223.795 405.112 222.834 405.151 cv221.916 405.151 220.875 405.231 220.074 405.231 cv219.555 405.231 219.275 405.112 219.275 404.833 cv219.275 404.632 219.436 404.511 219.914 404.511 cv220.516 404.511 220.994 404.433 221.355 404.351 cv222.154 404.19 222.355 403.312 222.516 402.151 cv222.715 400.472 222.715 397.312 222.715 393.632 cv222.715 386.593 licpf267.914 392.792 mo268.115 392.792 268.156 392.671 268.115 392.552 cv264.516 382.671 li264.477 382.511 264.436 382.312 264.314 382.312 cv264.195 382.312 264.115 382.511 264.074 382.671 cv260.396 392.511 li260.355 392.671 260.396 392.792 260.557 392.792 cv267.914 392.792 licp259.756 394.792 mo259.557 394.792 259.475 394.872 259.396 395.112 cv257.236 400.831 li256.836 401.831 256.637 402.792 256.637 403.272 cv256.637 403.991 256.996 404.511 258.234 404.511 cv258.836 404.511 li259.314 404.511 259.436 404.593 259.436 404.833 cv259.436 405.151 259.195 405.231 258.756 405.231 cv257.477 405.231 255.756 405.112 254.516 405.112 cv254.076 405.112 251.875 405.231 249.795 405.231 cv249.275 405.231 249.035 405.151 249.035 404.833 cv249.035 404.593 249.195 404.511 249.516 404.511 cv249.875 404.511 250.436 404.472 250.756 404.433 cv252.596 404.19 253.355 402.831 254.156 400.831 cv264.195 375.712 li264.678 374.554 264.916 374.112 265.316 374.112 cv265.676 374.112 265.916 374.472 266.314 375.394 cv267.275 377.593 273.676 393.911 276.234 399.991 cv277.756 403.593 278.916 404.151 279.756 404.351 cv280.355 404.472 280.955 404.511 281.436 404.511 cv281.756 404.511 281.957 404.552 281.957 404.833 cv281.957 405.151 281.596 405.231 280.115 405.231 cv278.676 405.231 275.756 405.231 272.555 405.151 cv271.834 405.112 271.357 405.112 271.357 404.833 cv271.357 404.593 271.516 404.511 271.916 404.472 cv272.197 404.392 272.475 404.032 272.275 403.552 cv269.076 395.071 li268.996 394.872 268.877 394.792 268.676 394.792 cv259.756 394.792 licpf286.873 377.231 mo280.916 377.392 li278.596 377.472 277.635 377.671 277.035 378.552 cv276.635 379.151 276.436 379.632 276.357 379.952 cv276.275 380.272 276.156 380.433 275.916 380.433 cv275.635 380.433 275.557 380.233 275.557 379.792 cv275.557 379.151 276.314 375.513 276.396 375.192 cv276.516 374.673 276.635 374.433 276.873 374.433 cv277.197 374.433 277.596 374.833 278.596 374.911 cv279.756 375.032 281.275 375.112 282.596 375.112 cv298.436 375.112 li299.717 375.112 300.596 374.991 301.195 374.911 cv301.795 374.792 302.113 374.712 302.275 374.712 cv302.555 374.712 302.596 374.952 302.596 375.552 cv302.596 376.392 302.475 379.151 302.475 380.192 cv302.436 380.591 302.355 380.831 302.113 380.831 cv301.795 380.831 301.715 380.632 301.674 380.032 cv301.635 379.593 li301.557 378.552 300.475 377.433 296.916 377.353 cv291.873 377.231 li291.873 393.632 li291.873 397.312 291.873 400.472 292.074 402.192 cv292.197 403.312 292.436 404.19 293.637 404.351 cv294.193 404.433 295.074 404.511 295.676 404.511 cv296.115 404.511 296.314 404.632 296.314 404.833 cv296.314 405.112 295.994 405.231 295.557 405.231 cv292.914 405.231 290.395 405.112 289.275 405.112 cv288.354 405.112 285.834 405.231 284.234 405.231 cv283.715 405.231 283.436 405.112 283.436 404.833 cv283.436 404.632 283.596 404.511 284.076 404.511 cv284.678 404.511 285.154 404.433 285.518 404.351 cv286.314 404.19 286.557 403.312 286.674 402.151 cv286.873 400.472 286.873 397.312 286.873 393.632 cv286.873 377.231 licpf307.955 386.593 mo307.955 380.513 307.955 379.392 307.875 378.112 cv307.797 376.753 307.396 376.073 306.516 375.872 cv306.076 375.753 305.557 375.712 305.076 375.712 cv304.678 375.712 304.436 375.632 304.436 375.312 cv304.436 375.073 304.756 374.991 305.395 374.991 cv306.916 374.991 309.436 375.112 310.596 375.112 cv311.596 375.112 313.955 374.991 315.475 374.991 cv315.994 374.991 316.314 375.073 316.314 375.312 cv316.314 375.632 316.076 375.712 315.676 375.712 cv315.275 375.712 314.955 375.753 314.477 375.831 cv313.395 376.032 313.076 376.712 312.998 378.112 cv312.914 379.392 312.914 380.513 312.914 386.593 cv312.914 393.632 li312.914 397.511 312.914 400.673 313.076 402.392 cv313.195 403.472 313.475 404.19 314.678 404.351 cv315.236 404.433 316.115 404.511 316.715 404.511 cv317.154 404.511 317.355 404.632 317.355 404.833 cv317.355 405.112 317.035 405.231 316.596 405.231 cv313.955 405.231 311.436 405.112 310.355 405.112 cv309.436 405.112 306.916 405.231 305.316 405.231 cv304.795 405.231 304.516 405.112 304.516 404.833 cv304.516 404.632 304.678 404.511 305.154 404.511 cv305.756 404.511 306.234 404.433 306.596 404.351 cv307.396 404.19 307.635 403.511 307.756 402.353 cv307.955 400.673 307.955 397.511 307.955 393.632 cv307.955 386.593 licpf346.357 390.872 mo346.357 381.913 341.195 376.353 334.635 376.353 cv330.035 376.353 324.795 378.911 324.795 388.872 cv324.795 397.192 329.393 403.792 337.074 403.792 cv339.875 403.792 346.357 402.433 346.357 390.872 cvcp319.275 390.112 mo319.275 383.272 323.795 374.433 335.795 374.433 cv345.756 374.433 351.955 380.233 351.955 389.392 cv351.955 398.552 345.557 405.792 335.395 405.792 cv323.916 405.792 319.275 397.192 319.275 390.112 cvcpf360.557 399.792 mo360.635 402.913 361.154 403.952 361.955 404.231 cv362.635 404.472 363.393 404.511 364.035 404.511 cv364.475 404.511 364.717 404.593 364.717 404.833 cv364.717 405.151 364.354 405.231 363.793 405.231 cv361.195 405.231 359.594 405.112 358.834 405.112 cv358.475 405.112 356.596 405.231 354.516 405.231 cv353.994 405.231 353.635 405.192 353.635 404.833 cv353.635 404.593 353.877 404.511 354.273 404.511 cv354.795 404.511 355.514 404.472 356.072 404.312 cv357.113 403.991 357.275 402.831 357.314 399.351 cv357.674 375.673 li357.674 374.872 357.795 374.312 358.195 374.312 cv358.635 374.312 358.994 374.833 359.674 375.552 cv360.154 376.073 366.234 382.593 372.074 388.392 cv374.795 391.112 380.193 396.872 380.873 397.511 cv381.072 397.511 li380.674 379.554 li380.635 377.112 380.271 376.353 379.314 375.952 cv378.715 375.712 377.752 375.712 377.193 375.712 cv376.713 375.712 376.555 375.593 376.555 375.353 cv376.555 375.032 376.994 374.991 377.594 374.991 cv379.674 374.991 381.596 375.112 382.436 375.112 cv382.875 375.112 384.393 374.991 386.354 374.991 cv386.873 374.991 387.275 375.032 387.275 375.353 cv387.275 375.593 387.035 375.712 386.555 375.712 cv386.154 375.712 385.834 375.712 385.355 375.831 cv384.232 376.151 383.916 376.991 383.873 379.231 cv383.434 404.472 li383.434 405.353 383.275 405.712 382.914 405.712 cv382.475 405.712 381.994 405.272 381.555 404.833 cv379.033 402.433 373.916 397.192 369.756 393.071 cv365.395 388.753 360.955 383.753 360.232 382.993 cv360.113 382.993 li360.557 399.792 licpf383.686 345.729 mo389.311 356.563 397.248 360.194 397.248 360.194 cv406.553 364.896 410.686 364.72 413.375 364.72 cv415.436 364.72 418.346 364.54 421.08 363.509 cv421.305 363.421 421.486 363.329 421.664 363.329 cv421.842 363.329 422.023 363.509 422.023 363.688 cv422.023 363.913 421.799 364.046 421.529 364.183 cv419.154 365.302 414.586 367.183 408.896 367.183 cv402.848 367.183 399 366.251 392.184 362.03 cv392.184 362.03 386.186 358.646 379.895 347.792 cv383.686 345.729 licpf159.938 345.729 mo165.563 356.563 173.5 360.194 173.5 360.194 cv182.805 364.896 186.938 364.72 189.627 364.72 cv191.689 364.72 194.6 364.54 197.334 363.509 cv197.557 363.421 197.738 363.329 197.916 363.329 cv198.096 363.329 198.275 363.509 198.275 363.688 cv198.275 363.913 198.051 364.046 197.783 364.183 cv195.406 365.302 190.838 367.183 185.148 367.183 cv179.1 367.183 175.252 366.251 168.436 362.03 cv168.436 362.03 162.438 358.646 156.146 347.792 cv159.938 345.729 licp152.346 344.751 mo152.346 345.192 152.428 345.353 152.707 345.472 cv153.547 345.751 154.748 345.872 155.748 345.872 cv157.346 345.872 157.867 345.712 158.586 345.192 cv159.787 344.312 160.947 342.472 160.947 339.192 cv160.947 333.513 157.186 331.872 154.826 331.872 cv153.826 331.872 153.107 331.913 152.707 332.032 cv152.428 332.112 152.346 332.272 152.346 332.593 cv152.346 344.751 licp156.146 347.792 mo152.668 347.712 li152.668 347.712 152.346 347.792 152.346 348.032 cv152.346 348.593 li152.346 352.312 152.346 355.472 152.545 357.151 cv152.668 358.312 152.906 359.19 154.107 359.351 cv154.709 359.433 155.588 359.511 156.066 359.511 cv156.389 359.511 156.547 359.632 156.547 359.833 cv156.547 360.112 156.266 360.231 155.748 360.231 cv153.428 360.231 150.465 360.112 149.867 360.112 cv149.107 360.112 146.588 360.231 144.986 360.231 cv144.467 360.231 144.186 360.112 144.186 359.833 cv144.186 359.632 144.348 359.511 144.826 359.511 cv145.426 359.511 145.908 359.433 146.266 359.351 cv147.066 359.19 147.268 358.312 147.428 357.151 cv147.629 355.472 147.629 352.312 147.629 348.632 cv147.629 341.593 li147.629 335.513 147.629 334.392 147.545 333.112 cv147.467 331.753 147.146 331.112 145.826 330.831 cv145.506 330.753 144.826 330.712 144.268 330.712 cv143.826 330.712 143.586 330.632 143.586 330.353 cv143.586 330.073 143.869 329.991 144.467 329.991 cv146.588 329.991 149.107 330.112 149.947 330.112 cv151.307 330.112 154.348 329.991 155.588 329.991 cv158.107 329.991 160.787 330.233 162.945 331.712 cv164.066 332.472 165.666 334.513 165.666 337.192 cv165.666 340.151 164.426 342.872 160.387 346.151 cv159.975 346.55 li156.146 347.792 lif%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Bobolo) (bobolo)%%Title: (HCTF NEW LOGO.eps)%%CreationDate: 3/19/09 1:50 PM%AI9_DataStream%Gb"-6H!=4jZ8hc2JUE6'1.,18J;QZa!!PY85t)1n"b?f?YkR\enb_Zk<EDt3APF&TB:o&@pTm4bX&jLfF\Q/teNGdthL93FhmS!8%\,Wj6p8tX^=Cp+SbFTB3VP^e>&";<VO\4gB/s`OTJK$paYN!/0]\limh[e\JNV:oO6aP=tn$K9eh/9WKhsPSfb15C/<dD1E".h?l%B?g>Np>>!)qo7/lBkhM>]r9iF2s]kV6_d]m.L*a`lXKhWpAXpee&,b'ZVkru_aV(`_5]Wc6=!D>IOFW.lg"K6]"&?:2QsS3i,KPT%p_W;o@C+R<D?)"1+BdM`HWPX\p=^%Y!W_fkAj7@oJ)#3oSOW(Vh)_1'WfNSZO8"W?P7bVh]S]q%6Phu;G?tpY_+L+Z4BOAs_[RX]%oKu99;&!dEFkch@"it_,gZl2Y2q586gFFJj>,QRhq`iG#ca9nXJf[&12`o'^gE-!@;(ABnG2(Wnqj"H5hlYcpYeLD>cW$N9i2G'!%dHn[T\*ornY:J_Mi/`EL4,r.B%M9'ffR%GCNnPihgSM^Y.^j,=A^g@*MX=P4fr0.ekEeoh$d)lpPV%rb1QY%Mb9h#\UaE<4XA6._%_k?A60^X"#J)%J5Q7UW=0:AD#,IlF;]iG4@N#L%JlV8bQrX[!JKK#!cf5%g>5CfT1];cpiW9bR'"%P;cAZ`s(d*IC5Qp>SSJ9Be(%ejcFd!3kL1:3io9YO_PY*cdPIs(iW=4V'cp&3m3q!OZeBCYSX6[dg>6e'iU`hkmkF%ncrn4T*,qSqj.)Y?i#fL*;ih6S&nf5C>O$%YuDQL.K"pm=K5QD;Um82=fp\IC)+qAlhIhnpH3i8?H;7%3k[lt'>B,1[7F*`:%@#I92kVBV6EbjM5@FPU8RVlH\A"n#()#qfPa%^%H5HI3TD/e@KV)?[d>;VX*oSL?)uh)rqh/f!25u!TL&Jka/5r_s9T0Kk:,F:I&s_sMhP?_Vp4PNd7]dot@Z3\]qM1oOJ,"jXd0NXR%ko#Htrl%df5;C#C'm^\nLS+>LHUm+WT7f3kn.SH's6u4AOgp).9'p,HJd2j._*;DQ#X>%EQ6NmH\kp]ZHc2HDU3<MJ0j[gGr51;B%42I?;4+*ND9i&$Dpkbi'^Ti8V'7(HZYmg?/1aP+ca:;(-=s35K4=k_GE#W7]S3jk2j?eeSd@IKdW`-Mt2oJs[M!,f:Nho/0<'.ch%cflN[:6J3(9Ogi)Tc34_+7ZOtG'^&C-)=O4QCsH$IH#.\pPT"?D8ek/da]`R.][PSN!(HsD++nbX2%fD9D-`&VJ38apm8@^ao>KZ%4]-^nTB"::op>ZCVHfH1l7`,-IJU)Fd_?otha&C=%f!fH20u"rd_GHtqQ9bF^XCWO#!paGqH'`FDtTIr)=em6Eu[:>UiE6giYVQI%r`N"HEU+Qe:p1+am=H(\iBPMmNN2c30XpJ)C\@OY[pH8A"eL:kTT(EOB4_$!D9mb,4K;c=95d=)9)`V[XC\^J3"XR>Nm)AumB7J[%2r"l'WO3Yq>SIGA0=DnA%dF5/fPWk_n9.*6J`n&UO*"$1HdKN)RKj>Pn*!`q`eqGm341?";Kn5mcDPsc05Cf;RZD,(0#]fX=MISB%^>[S?:SVEk5@U]WcupBi!p2rO+uPoKVB*N<2.B.,;,9/F%ukeOMYonGE'0BDn]Ft]^XTi>qgYg,L=A%nm?%&A]D^<k"negHhT*E[%(tKTBI2\N5KLIr,)".1mnGL/X:6l%s3T<hn2uP>FCQ('rV_c=WhLiP!r.48WUY;*TH[&jab1O,#FWQ"E8*;bH`XVri^XGf:0*G=<%iIh!VhB8ll^WS4m_h'+6A,eW.kgo!82I9C\iVuu$.fQj3dZb4/2,'GY2fOJ#,"iJ:i(a4ph]WIqb1M`f`c+QB?O.mpo?Z_<Qr=-r%A"%;[%AIs$[Z19B^!8aC5H9k%0VE[=RV`;<R5m>orJW]Fe*l;/B"LGSHd+,r[m4gSXN%AHe6h,Qj<#<pMHIqN]`pHuE=;>mlo1+^%)`^K/F[A[XIcS#H)X7=BkmXUWUQKQ9N)W,=8s2$[ndO#A.$)1DFj^_V>3H(O[6H)%d/P$T'&h?$3BRh'JiL2(,o-fKcO$Y[+E6-o%^ZM["k5<sfInN]IJpLTsWkMmE!-_6L-"P8+j/n*2D>YCIJ,O56K1VD^/]"W(acQ$QW(aFqM/Nd7n=+8/q&_RR[oC0)$ZU4='HGk6%j-2mr#*de;Pd(3YX)<:KJ$JD-')3:>[6ab'H?i6#5q@836VT_;dd\5\#JZH<;IbZ&&'loECQ^#^:%;WLEa0KaJ8>!s!0%J*"1:DZ%R:S`X,+ea_D1hZrrEG_J6gubuL-q1*l!4r[5aqej!?VP^`j`qN"m?!:YQl:^N*\EO+es"7iXR,#p)7o[]oB-d)EI'l+*A(8HK`t&%38qg4cJb&\^XR2?M=_8L3YWk?$\qRhi-nC>*W.:,GXC-dX2#`M`a#KG:r`lei!:0'ImkZ_R2hc<ir:m]jmXgV>I+852JF:;a^TZV%(mR(1&XBRGN0?UT&bdPGAboe%lDjsbEkM\7ecJ8Li#YoC%O6FgPRP)[W,pXm.iBU[6k?T5-+S]T2%I`WCqKb.ndVl4,s=V[,[O-D%;9VY:%ti%Bj.JYO,,AD4J)!)O`k%m>(8oT>Ftepgisf0_ndb>\;9KP4RV=6Uk\SUF+a]^/^c43Odl8ttaB1k-#e=tt9'Kp6_a`CH%?GDllY6Fm"-nnHI5]t%#UgJ)h,P2OF/Z+pKg<f41`F3kZ>3(1(-_PalSTUB(-n=I\ZQ3<Zp]&!_X(Vp*[/meV>n^_o<lpcj.\DLh%*c%sYhgptjPN!?I%pSj=H+F1O5d]EWi.CUOFR"AekX9pd21T:reHm)&otm"cpi1m1TFVrr!)4H4CF-/rnJ^+*Ck"%XirS5,a;Eqe%g7$l"XrXn,b*Pf^2/(f9NLE$(Lq.Cj:d[cZ.`\,R7\<CHZt%rr5k0-U.o#j^0FqW_?F.%GU1Ml)7l:eAo,-p$ZlY@kObckh=Ug@c%k/YVaeSRl@W?sLZCm;!bI>s4:7c%lR`algc>PT2bOmW/j>:WG,WY5=!+4Jk5#-;ER,Qkag->>$kJ$CS1/(8jBBWdC9>NpA(heTX`%D]61c&JKT0[6IrgoT9dH+Lsq#<%[r.D9UCr_qPYnKC8X&,@ec=c&V9;NS%Er4RZA[C&M&Y;JB'!FPIlJPGn8d,`Ml#$X6m]l>_,@%:9l,>.R-75a+!CU&qVX\bg4^_g_TgcIQLCU&[N9jp/e#Sp:u]/K)WNfc\\A.>_$Q1duOO;W)5rd+q:gn0Y7Bi)!0Pjfdr$fYioJ%%lc:XX"tugeiT%)%%E$#mE#n\*6p?#,EId49qoe^q`$++nnrhu&2qVL1NTA(!>m#Z>q\r6'K2B,p^$T`?51P8Bn@q#u%DSi(6<oH*%`rE7IqSX"C'D)=_JTa_7U=Z7r8%A>JDrFWZ07:[6^9T\&)uh,]<"m,gAImPT=L!$ObCTqLee8AQQir@_XB!2A]HP!fs26SB@c'*U%$dimnL/<H7^Ys+hDp]5m#sAqb_XW0F+^pCMm#?80Hc"JZ$A/J"M#JP+`s:S_D,u/%>=n#^p&VFu#C8&Mj5U$!g`jb_[Ib%RRR,VW%`n%O$jpH$Q")Fdkd9c$HJT]mq'5iU@i_?16QmVJ-s,(g6\+(J!)AZ1Ld$_+7r?YbNfahc7BRD"BK_U4H,K:>M,tSYbi&Djg&3_p#%`/A*cecPA+_:3ZY:N+_^oN_@7<_0Y^LZHki\\p9!U%'J?A\CB5e.eGVT+X(l%hX#5PGAm=PUJo3TVs0V<P0p?&ordQ'PVn]N4@`Q%)Y[nSp_QF/lOksD2(1TO>I88,C>p#/fsM!=$6;Q?&=$;8a2HT2D,"eb*k$_+;16:Sn?;$t539@Eo!"9Ud4Wmg[\AG>@b*G$,sDkt%i[<c2/.5r\&hRjAD;pO47Q!&p6<j'MNr2Y8'BipmrBU1Ug3$O2Ehi,+$^<Ku"+#a(!I\$Z[&1rD?+rUQB0<S1GQ\au9AM0i9#-:\%XA7UkU#1Z1W%QVAJVE#PAX?Bb=fE<;NEWaf5jpoZ>ObDP)DTeO&!@Q^X"/Kk3`5)bX%)lhd:MbQDNU\uMiKDm<&J\)ZT<keoSl_m%j_ZfS5a3UbU+!4PZJ]pQA$S<'eKF4[AS@SO)-N\RBaS&kXc;u\bnhC%hBSn[PkJL'b>F7F&,Nf9;&-Ga%$54oY)JuX>MrT7m&''+%ZEL(U`,F'H68(_\:)HpX.&>H#@t@ut<!-]%Q0a>Cn81XmR_VD%5XLd$<E'`4fl&UbUnKV:$\YB%)X@1!0"$=n!o4JZa-SoUB^<`T%U3=gZEf?87$(;/PVn=FPRV6&Q):CmO$]g*:%B#!V/c:n?9g[f+Ls[PrL(M`:_1XZgc<"$P-'!(oe<<kl5o(<Of:q&o7UGVFi"86U%d5FRL^EItah1h"M65!%iPY[(lnSLQZlBg^!l!X`/Dj+NnJ&r>NBWZ7`85Jjr'hi%nFd#i?p$6JbOlZ4)@BI]4gE[r<(IXagO-M@C%gYT/LoUG2.]PZ-Mei.DZ\VU+'H+:1NH:;YR[d]4+Qu3L6+oT"K)Y[bn6[0?'F0Pj>R$\fu^*ek-:"1)@5II0<TQZ]HY=USJY9n]K%lH-c^q$gc9CLf:Y&pg6(l]ou,Ko]XGj?)RSRa=DY-E\rq^Y\.CXH>)sEZ=P/2Jhai?!EC*M;)s"]@*[i2.^,7?-8BhLte>>%moeK%@YZ0T["kHDZAQ%LrJ8Y,4G7`M<"ialCe2M$LWPj5oXW=RU=TfX:,h/@Y#?R:8XsPg5Y+/!C/Nel'0$92Q=QQH[TW2/(gbG_#@o&>%2)ML)[p)6.@8$F/YV'T1I1*0LYeaJn<*3Pi>G2e@JiKrR?B!E#rRTs:OkG&NDF,-I/n17u_T0ga7;8lGTs/dM8TmerH.8&?>$b=6%:sCT]+%iJh;CHH%bA29X5LDtecs1f"b,:*@WbS>0Ub:dN"o!=X]"LDOcu"?&Q23?mVrui>'4+JaH>"4e>7^C+bhoAVrRQU5Y3%c.%T;o<%0o_C2<SJ%OIbPSDT)5)PIJX74PMb&W_e/B%OV1^Jmu-pW."0je"Ob_Fp*@0#^OLi*S"99%j*'a8]/7-Ch7d]kpD^f8o(md@%FkrT=Eu=j,di/;C\c&R#YY*sLEA"T3UCLlBs![>ArbPp6i+3Bph[Z8rHd2JG%^.Q6[SpN$4EYSb8+$#``%UsXU<14[MWOjUD="SF%>'hiqFFQrr5eNr$:@B:V$C";(!?V6(CTfYamr*\t)NQhd=%NiH4I7YIZN1uFh`!Sjofi7%rYAnbh[c(@qqLOki^OB_hrs]MYO7m8%^Uq2A6[ikkc0t&FK17a'XgS.ChR=Ra,UK86\h8JKF<7cg`aS^mgU[Rq@IgM@fRA(`ZP^i?2iYj)6aq8<B-e&rYjm.:e``58>ZQ^H%#P],-=]?[Z9NLFbJ7@#.hpPE2:)s%_OIkBU#JK$hc#.7k?*!pJMu>'-P\*,^W>eY-^%8f*o)$EoZb0CD5.l;gKX'N*N:L;si("gC%_7,&[3;2998K<1ePYZeHO14W?-\21K46>;hkB!DG%FERV&fskgH<j]$MS(@&Q_@RWb7K=J.J.ZX\DOf7Jm)PQlsH(,:7"51\u!+s%-ha`9qs1O";:cp)gk"a4ZM!mA'c:P]9S4CKi*\GB*sY/%0jmW8**7+g"rZQ]Aap^/'7\hE+Z11/hs@gT?=!j?!M$c=RcXKCZeOgH%UE2;meLT7SDgRJeg\]a^mlB<bW=,K6]FFO1=]m=4k2i.'lc2ra#Om!8&Og+_TeY:P0-<"id+W!iqHDHA#WsrTG6F'gFW]AO=K)Mg%'E\(Ga6*6g[R)+'6a#/;*J1phABSaa]ls4E!SXGmq`df$1Ac@+H%#S^:f\rdTG/C>3p6ttG**km!?-X=WE2QOM;cM3],'kk[G"]+%mAF:d#O)KE44b$CJ0?H32F26hg_cf$(ss;2&U@mTWV6ZuB"t)a'UBh,Z$"4FgP;^(L+;2n0G0Qp)O<Z^?a^oElgbd^H3.";UXO&Q%=/Yf]()h&^RcR37[@#9nKe9E)&AD3>&WB9Hl8M[eHOXYE+YZh6kJM!o<fi?7"jK4g$Pq:hP$>BD]Il_uKg9NQ=m>MAm`t_'FYcl7%JRAHME8Q8f9>G>6gWQL$POn\B>,TiB;Lc981"<Cl]"5Gc^[;Bm$g&!rnY>jU;+TejX*aA<UXOXbaeE,6YD+;_K6L8:[A7JV9Y-?n%s.RrQ]ObPa(*F(u&[W<fW-es:V8pNM_tL@cDPa&.p[9.[.uI;ThaGR@%KD6t2`#efBO#HpTPo`BIdTc+Rg&bJSJ:dq7/]>AMllnW%\8tcZ3%P"h5$[>1E2%kh-E)s!m.eW_!c[r?U%3\!9"X!\rWcZfJ$Tu6mr,E/drhoTI?Mo2;?s_Yi;U?20--bN3I/=6?)0Eos4tAN%;rP*$>deue6?emUHZ[,7O^@^qoC)(Bj4b=+[r[>kn([0b9p#qVK)at>)/dD(9foO[2pL)!2aqPK/GTg\r_2]"[\#T^9m2Wc^YSg?%Ons9snBgMZY/)%q'p!<%4J%E!9G*lE$HM0h7esY)GdX/ipU@8:\_$a\_33V\VgTppdS)+f.,p6R^RC]`$teY7E-6[-=MAOFj8#m!%VtgFJ=hJ0Vd7O;%%Z?N&rRJRG[6*Kn`dOV)-2S4YH.D=f2m5enFT#$BIc'Q&o%96F/1ZifrmtYVdtn7k=9pU[jH"Q-P]Bjm((dRF%7`3G$7q7Ze&dURs\j7f=0D!huFDi)Lc&NXi,h0%pZ\Po+27mTO'5NMlo%dih,3+rIfT1g"$@(=Mlh:)AQ!X?mE7p7LVZf\VeYM22%C@R'KkH9`^n%lXP/hF7[:fbKF5\V8)UnRhFl;b"U+$_Dg10j_HWh!(]RodN#'3A#POn[nem1l9;1fiu9Q6'f0X1r`3kuL'S_-gR3%PktC/]#nDS.`7O,@*[GAo[l6b<_FuE.(.f2MBX,+_f>?G;.D>->WJmM5;k1<eTR\m>3=#piQ&Y106?6iXDEigR`A2#qsD(9MNaM2%IG;Eb<.@d`Tq\_3Ibtkif^@QP4(>"nou/J(g\:G:VHQt&15S'JhL4LSC1P=N[Zau[^;e>H2Ce:Cj#%=dIB,&"O4T(9-VfbA,\kfK%:+jFl);[ChEd^/L.mQ,>/bVOnXd&6b-EBQ`FGiZhCH=)GT[[ltfMP47]4KnkATcgp6ZIK&U-e_B]o%q#]hg>8W%(WYh.CQ0RolqE%dDAdt)(iPGch8Z(621(CX-)d2?pQ+HQeZB&/Z<BGb]8^2j_aI[nX*UHb/Cu`SAE)ZZh=@KIA`6F_m"g`L*#*_N1ONNl&K*09c=m\%44fa@k8*OCaJM$7r!k@19tU!]>S9q,4gqu3Oh)2#L:-lQP0'Z8b[6f_S6W(@e[TOT\oQ!mQ/0LKe`6VYmgT*5b$;?c=UYgPHFNWh%3B=d&0M;)!a*]r;EZ)ACV^^5K@&:HEc(gZS_;_9+Pn4[U#8k1!gWL3kEn_WshqP7a?H-I1VopW+K.#MjrW)Zj/#,*QFErf9*aYXO%\Z)_Z=<j=97Q"m8.@G+F;s(+/cHn#A84VFr;qRY%fWO:]+2Q%R[_?B6^4[Z4n6\(7g%-Ca5!??[R8N,'`2RSuHaL!_.+#-N*g0E(%o<7;iSEKM24h(N.9b],<I(!t-*L9oH2'4L/[b,sH[8PtS1KJd<4);<a5.bH=X#R5bnnJ&R5-6d'7JD%SiCM7BMsTN(m2m*4L^Fs9%Ls#FdPS5K:Sff^c$7lFZr^V^XM8d&M[uXpc=rF1DMfjOR3o),@grV1**dFI39Oa?tm7Z7(R*7,/0fd`n5/,_\6`"J6ddd\J@b14/%I:Q+fQ/:jaY0jJZc(245.Vi6&]sNDoi5SuKM="`0^LY?Gg<0aa77T;EF&]5[n#6#Sh4qF`l5rM\f"i?WSGg*KJ,dHo.<K(pl!"dq%+\qnRFh1Rg>q4(ZBUC1VK_iC0rjtV"c"Z!n]kQGpZqh/Qe"pblJe>crpAM+4;%`sZU?+Q#R+FFe#GCkLmEXOJ1`8;C4GlG4h7@2N%h=`^6Er5f9#c!U:n_JAhXZFbq>$JUT$S1W+dC6."`4OdTFXFZO>@R'!2ZC2e'KT<44OQ.7gLafs26!H?n2Pr;@.4ZQ-DuVA'Z+PV%DIZmFdmn!jNVJ'nKOo-(+*i$d*>1^]IOBpK=#Vi.bsY0-DUo(9e)H@0LN9S.EcAP'Z#j"gM!+WE5$of*TYN`L0CeVCHksU0-IO1p%Na"UiT7S3Ofl=LC/CIDPg`XH\lWTAmX8@MIf>-@XD"Qrj]R_KW2k0im,r[?&e7h$/C>Nl(2jEaP@WjC"36dHSH</pa3k#X3(bs;e%R_9c,L"9ZClrBf*Jn"o'IjL"Nqs^+<\Emm;nYIHhL&QdLB+JTA%WXm+O[22E;kGW#DD\tuU`"(HGg@Ge!/\jce^M-EQ?eFnguZ"%%QN+[5[`[FG?V'NQX/oNRe/@@;(Vr5UAYUmPHrnH5LKGjM7P"AlIO[R6/=1oY9sPb?Br^Sk"(i1TObOXpd$T3g"W]5ig/u<oZ[Br.%*f]`=j#?Cu#?cV\d/\9\Y&4famFDILH)YPW[2.-]$*\2p=3]WGb>56%b^HH)'5"3>WcS'9L,iJs1Vnuar%)&&S[/0fEF]",WM-Dh%AYl?["P5*j60'r(?<-9=0P2u@HWb;/<R?l^aHP;d(l%S+A[Ve3\(.iL-'f.pN?=Y#rWWrTPmpE`jNXUY,35W["g[5+:@].L!2ZdR%(=!jJTL]_tpbP&@HM'g%"Xu^W#kJPLJPq+9[,IH/I:%)q.)jpof#9JfcCP`h\A-rEC>QmG<p2d_"c#S=$=8s0!D%sS.VF.g=l2VF%V>!FMdBIZ6;oAF3GZJ:5l4BJUXrUQP[f^iLM580q(KT@O46Q:n[oMI7qX=sk\Jf?Ks/@'ll[^($T=fqT0:0E'g\s^t\CP!@\nG,+%S^g2FoD[h6jncIB%r5s=/bAnZC\&h(G]s$b.nsk[\%\B%o4rfuSZ'h^E4Yc7%h#R:/shRZKjDlIq-iB=rVEJ%^@=AA]\@aUn>`b`%h)JW(:T]=P#N!_Dbi@*SM8bsV>8%BGQ)TVZMsJ\&McTdq@Wnd[I6kYO`SLnK(04d*:@VA&HM6Xam.JcCHFs'G.\ioeiW3Mp%X<D)%9BnM&>'JtRB#C'?S_RT`8lM`dA[rar>-FQ8I>+;_pHZO#%FM5IDQ!*#Hd__1+1sCqS\nTbLfSAs3H])Oq(Ol<YF1>#H`F!?WQod3%rXJKGGZn5*S="K2<d.V&lEh'3>A9(Gm@7P=*2YRhlC7Zdrm>,5QDS-9G.r9pp<sr9H?OeKr$f2(QP6"'cVDdZP8Z#IFb:4.Al`!5%TAM!gFlC<)o.m.>pLaF#CM,T:;<R;qW#P??XARp:=C3HAfA:TK@.&G@UIP4Gj$lY9hQs3[_mQnJ7U]Ppfl+mmZVSVu"J4CRH8DmU%=ZK2k[.EBl_rHaEccj>Ie:,fW^LiIkVLTsGCXH!Bl^V0thd`F&rM*Qlm(D&S/jQ1,45T2sf9c0+7S?[]=ndA`ZH&D.BXH1_3^%VK%dV/U%CX%*I@\_beF.5%E)Q'^A>>G(e=Za1AQ]nc3)1T5]e7e%0RlN>bqtfo0XANYbZ-pf3#Dmk?U\a?/djIAj;<R;P;1J=\5I%,M%onRM/H,&mC1mQQlUY`_5S(d)umTsrjXjO#Nq;L#)=JO4M&bu;pA*Rt-j:E7&+(L:RB/VDZhWWY@CogM.fA5Bd2-Tlt=-#37C":kh%%e3";BQh+nY?Q4cHtWDcPLQP9oC0G]g1[]pqg',q'O0P@IPpiepC<B+I5gc^?)?!;,W9tYC\t)jmVFrQ*+m0QqYJl"Nj]J];AsuK%*U[`mp(JB.0m^=67_,X3boSb"0AiQ_\o!sbSQS[)F=3S=R@SU&3jI(n9./12Q"b[F\2O6D=^%T0`i$dW?]uFW^YSfJEA]t])D+Zt%c(89;m\Vmg[rO_)2PneSYDo_mf::nkpD,)K;igOCh@oe_bs%[mD05@8lhkdDUG!uA3h?-H*B(LE)MPn=>%u</ZS390]RiUSI`8_C%PM&"UNS]B\Yss4Kp^\Cr-s6B"X[l7Np0mSpg:\C_]@a"gh]FFGmG71O5bi8/nXe=g58q2^hWol_,+LE[?]`W:kIm.iBZ5&sn\M0S%NpG>2V-as4:!>G,rA/,orY2i@YEkM=;PUG?G>#2192h$EDi[FTfWU?[G4\8+?>IEXp9(VsUT^RCp6VDL)_^BJdC0d/nod(%"^t@(%+8WX.#qOg1Y+E\+g/m$%WDC?ACYpL&'q0VpJ%Cj?[S_Bs]dTHnpA"bODmhifV^HoXIHTPP6:th;oBU<rktcLNmXJb0Fe2[adlrX,%HV\iMe)*>O$,__"2mr=SVjq59d6W+4p$GLmd1Soco;l:^*rE^jdk>\q1JWBuT+o9@T7;7&s#f>@pLQ8Cl.4+6HJ20":[[D"oXE08%B(s`GI[tUVPF`,=IJr]DRJJh/pXRgdVp<C^,Q6l-b4jp)MOEe(j.nnf^M:7,TC2Y]H'(CtQ0H?_7I&V@dgK/W4MBssT0D.<]b=0p%]6tB_Y`+Qskjq<A;YVdSAmhQL%cgT.RSVPt?9Wsag21i[dl:ImhnHdP/a!>2a'Kd'gmQ^cjgQ<jSi,CHDS0:84:7B$VOuf$k5Lk3%hFt>+qPAYCk&4)8ZPhGfRY3k/^3t,a#D5!="+C1F+Qe`--EW\;qb-!siClb:`9K.*#3p[7^m$@pF3^#e?/?#o1WK!ddjHssaBmb2%-8c,dMl1JDAjkVCNO"sI8u(6!SEHE?1j\ja29Pj%87*b1O*5iE36t05'^%J@7&-7GW_o94]ptJ=qs#.bf*T+Y>$@]Qe'lW"ntPk3%)mpoM\i8jOh^a1MD\`Y,T&/[A]hq@<P^3:#NNu\"bQu&bs-D/9,k+5lURTTCoL@7*fDI?b`_,Gn1t!:*a<9sKG:,tA$9a,-7<DM$%j7>_8D2Gkto<4GfQ*[M\7/#)%)W0[YedBpJ>V2d(T[.6\]cdP\GtP\)N&iF>ZPm_Q<iqeA`\nIL-H[fp?X9`bC*2!&q5Tsdo>hW]%%Wn<baQh&bnK[h;JT6;\CH88\T_[Vrpc4=[j(VgV5V@",o^r7`Q:GVB(ZGHTV=okWmaRKtTKj9<bTaQn$3Q`8ISl4uClKUN?CG'3%Bl:/9B9G=I\iLVl"+'H^_e_H-focKFFHfjB;uC-F[iIgb)M]K3lJ5F8(cLO9Z+5Z4TCnQZa(nHqq<Q_f4!#Qe+?KC5S8P9NF]/8+%k:b]ZAG<:G]9tU01Qr!^&*<DX5,T"k'6>nR<;R2o`%!lu7e:9a7.DX.YrlK,<S"k\=Ff'tq8A_>S$hkUk2;aE[E-9h0.N_n5!o"%%:5nVp\-tq(n(#SDU7-YPPTn&/b(iqlmE=dB<;"c#W^dHPVl1[-qYE_BCp=WsTL:f?HCF_rBl_AmBii3_oQEVPj7lkAc%']h?'M^c%9qgCpRW\V:r[q>jVar,QitAr31c\1[TG?%gf..qdo18gsDOS[D)N>i8KZ/9aqEc9nn##pE-g:9XQ]7gb4/?k:ND8SX:7#E,iU^d]%3(P&:j1@<s(*a3rPlhUFb=\taEi+,i].?"Wngg8p+0G33iS/o599m*:PhDGZ>_pO.I;l_i`q@c+;R2oWQHQb`<Yj?nf7Ih$,(V<a%P8BG9_l;>f"$I4O-cu$F/Z;bE`b>(+Qi$9`[-(?RIUdEM8nHZ:S+a_"IP36^8=6#?;Q5C]1X?FZXEq$.c2%%)/C\8>Go=\9e-b(:%]kk$n#[!NF0YW)8f;DKY-Va:nQ)7;$f">mFdnsjTVVB6P&t]4Xh555WqGGs.O>9Jh7r&n),FIZB'cTBe@s;@A93tR]!VqqUUoLp8%1N6nc%Ss/Ulq9fZbN%htBaQ@H`^_b)S.r<L8MPRV:3*Zlj"QDi'A"=1`q<$#2Mu]P\?;H15F&+':*l(r=RYoN!Va1D*UI=9r37!E%nY8Wdn+H8Q-d$6g2N^&67,!`N.8$/q_NU$/D3Uq$_qf-6*#G+r,W^\,Q]"6lf&\1m'ciEG;nNqkE[K(/8JL!s&;g4KLe*,9R7EG\%8WD%))j@s0m__Fee.rEt%l,M>LkW@HqHhKcFO9?Cq-;IS4n&C6%FRLF:ug`IRT_*60M1OS9gI"9^Z%.8#pn+!\O_^]!(^=C5[RsH%86K^-HF)(Qc1f]aB>6Vjg+B>0jaNRbU>P$6j>bbgGk0V5MOh,p_c4YMR9uj`RK<0",u/hck2a>V]`H$.5cW73)R5h&&;pj>EEh*d%XI+g5Dn@_)\"AG::L`t&B&3:1V2)P-kZMYR,V,0g5@9h,SiLL9&s=PFq)7ZW-V$]7KOc1]7f@Nm,5VP],g\D]G4=u*nlQ$[\60k8%mK7k+Uo'BX6e\!J!$)Drfr<HaUps3p'mn+>G=RVh!*R%>b^R]nou0osA4@Z;:.Dlck@CCt7'%Qo9]J4XrN>eQ];R6NfDqtdPd@N%%^HPtK2BqN0heBMS"eUD:L"@gsAl:X`1c:@<KW_G9/h`:SU,F]Ze<t^`qKU/Aoh+s1$V$oKp"@%6%`sN9UdK-s2hV67q(SMDSQOhk%MD/?;"i(P;fEmDkC^P<Z^20A]9(Z\KVhBt.dJY"+#ZadiZDA$j)3jX-W9Y*s(a^V9o20V:kRo.A[ShX+nRu^4:<(F_og[F]Vh]#D%,#]k%a5V*g$C\WU<*h`8M<&X.5V"'P+N#O7V*`^1ROVX)Y^D)X]r9b"Psna[#;W%$YW+9,c8'l*U+HCLad/Hk+Z-8m$ghpC1ZZ1V%/"=j@KDfS5.8C$6jX`elh>LT7>-Y$tNlIi$UB,06N><P$mbP+JGY2oHD5knEqh&dd^rghlMJ=tV?W*b!=P<\lW#G%?j^mLa<ueVA%NE0$PZ(Bo3R[h-#4_)iP=N_Q4?<KEgN>>ZCq4Lc.PV8\4Z1sDl#0A&^LQRC^XR@mT]AqZ$6GGm;H8;W,fZc4>,o)e<B7"5MS49q@%Q\qhHW%<A-1gA)qXhA1TK2!6tKt6p=M`0sre[NB6q4qq-;cYL74E`KiCS+K4NrD$'adZ+n$J*\8or,An*a)3FQ&R@rNVuea;!B]b%NlAb'4gmKLN3<SGj>>VA`GHdQGEH>DoCl/tgeCXWHUobZN>nC:bdN3oXVd#N#U-=kk`<QpLKY=,iS[`FlcJ_dPA66MjB+Qt>/Tt5%bDmq\Ado@JV$("Ib%tM))^!cP??@r=iSs\b>Mn$k@V#34'E`J^.<t*Q<!&K%qGr;>0=*ga_O`AZFn;\jjt@q7:t]-#$pAU6FU#gB%\@__2_'DdikS03OXOU5`Kh?_Oe:?<<@OPdn.H^u`QKdBD2b]Ror^kgT[t%U2'f/P68j!eJd*B&OI/gJk?1^`8AHCaN)rkg?W%<Gc%VA,L`Vlef`A`gUqnO,o#]7o7d.4YMJO^(qVD_kn-XKiNV"8<J)Hhn>7crLgcO=J<`l$HF<fEDc'Nh8G?LucbTh`lVb2a5bf%c8i3%eotl"YHKRa1[%G0j2n"<cCgqkU![rFZ8:]pPK/hRQ^pFoQRt1-%UF5^*M05cNZ>XE7O&dm1ufN<LFtZ@Nm:TA4bp2T;*BOa.9gbY%*4kJF3\C)CU`?u4%(\t>mg(pqnloQ-?06Ip!',-/R2L+oG]NM4jRfgg=-)$uhYo\-l'XeL9:J;CUsE?JWG;.6r`MY*Vrp]qA%Q"B%k/`6t"lb[$jPW:s8FK%'g(-,am%gDom%%`Wl-t`*fgKmMV2[-o%!L8Q8gdV=ir!@4Iih_Mrio$u,RW/4JY6]V^8.Z`b'e]WONQD7%Q[r$co._V5PsM=lPW=lJPnQ53W,$-T[M)SMi]Dp:&u^Q?$Bd+'4'S-j12Pb'[Bmt!]@:l4<cfhtjbfo^]8aJm?fPe!N$6k+GM/im%,hXcek:a:%J85p-2@<5JZDSjJ<T5Qrmi*oV=`b&&I(p?BW2Iq_#LgffGj82C8T3&6SjpCYP%gU(dnB"nQBsGng`D9:Z'N)tJO`7o%6>%`u6g%NXR,fm``8$3C=0/&rVs-j'fi_\p&!g,Bo%^D-H$lk[=2SX?+Nrm-^EDR^C4:1a;UN1<6_kL?#lJ!'//9TkFN)6Q)So,"%"(*mn\f$Q:Ar^5)*a`5K9JL-e]@4$ja>jO$E)oko9Q\NgONQ!peIP*RKUeIh.@.4Q12nW<O$X\:@^3^eDtR0oG@pgGCSDHir39]@%G&R&QJ?[)b_4kqmgjHZ..\[Y'Sg4rnI,$qDfgh'EYFkfO96^(T7\2Zq-f&"G-[Wt<fN/"n`PJUr4W6bKo0H!o86W%K!$el)c--i^%\hqN<JLPJ^ZEFib2(L7s&uWfJ+@e&)&pOI<Z9/ri;"g#!U-m&-nYdOtYhJno4"i*Bi^K_co(IUmSZMInS;a/?ek+,BWhiqk62e([%hGf%OVSpHu\3IDb@!F%^c#-r:\q=Zu3c4Le_`KRgaGF/=%iUR%7L>n(e(Jce15a@p1/LRYk#<js6)VOC19%n7[g.o66r8b1AF/L<%h/`G[Njn&*aOng?-7>QN2H4G?5S4mBK.&<7a*]g/Sqp'S$9DhFN#9?TGaf_9.2<.P?lE4o?H48Q.D6bB*^37b98U_X1K*i9o7i1E%kRi%bN*A,%-Xk"9:!qDn/tJ2aV4+USpYpIsYE,U@HYN=gHpsQ:nE-;O`!hJ@k1u+bSUQTDI)eQ7BlTM+Ji_8dft9J]7FKOPh7ud4%i$XJjPJ[Sr+%tJu*6Au?bGuTYgb:VG_n<QHpZj-eeKl[1KM:@[+=L..+%U_2Y0Q[AHF!o.WJ?*F]&`\1\F\\-j8@r]LF[cOfLYgW%g+MU,EFb+UkJIbC6ZncD\>4P$Qo$_XI(0cp"UjJ1Q1C-K`fL_/k9I$d3*gREOUii!0[Yih;*;LeI(6O^!lg]?=%^\m)co4.HnL_j%XAeLJZ$=oKZ#P%%VoPc`,%J>uOZeiIL%[psb5OtZjRdat643s@6KZi444[l.'jdnQj:!T@"YK;$$`gA#m'B6j4n/8/Sh[c.4Wp&Q%:*A.=j'm9,fIqsZ.k$-,+cJp<Wi<TK#0_m\#ba<8F9jT`.=/'hWIPhW$nd;5hDir1F>3n;^6n37(I&@rePfEU1M3gicSuO\(Lock%bZQm+Sc[U(dF5I#[om3Pl-$6?Z\8*fNACl2!b8ss:::0R[edp[Af8KOR$6d&$Nk%;RZiGg8;h&TRZl%<;\u*MoD-J45*hm"Nf;JK%A'%:?32VYaO(6='rE/t7k`h0p(/q7,*s3P:YV>8fUD_eNN'aJP!motD"'/5,qblCIH>LB5S\h@F['qDs8'a.niF3M5.?L#[6n7!-%EQb%Ri<mdZa,gX`VpIhpiA1.P%@[^&U'g^aVSf=K7H7m3[bXs:0uAWDJUW&g7cMm1-c/CPZ-2R&%THq<-0tq3LaX%k'o:OY#mV=X%kJL7LK7t[OPm>N?ek[r>@N`4Zo4%]-L<4dpB6NC*LBr64']]PU30^<"k!@*BhAVa%c?p&Q'pm_u'2,G<(DD]S?Y^<JC\HA:V70lM%![]U$r-!g=N$%#,i\s*Zi)SfU-PeWNWq_.3C51'rJ54-]k2.?h@%FG\V-f`/bts#+9NirTEo,Kmam#m;\&slZ09J^??<TQW6rr3>%fiZR\+7DFl-+eTJ8p:*"SRM9krF&<*]k>gVgP`,>7^'.=Z.9F1;7K`6gU!BH;MsuYYgm+,+(S1-a_k`/)0S:'=6UTG7QiTbV_m[%%H[bHlI8.>a/LSH=l_HJN\bPP;[8FRGp*T`%^.Qu,GWR^\NHVnRWtVIl::rSo3mo8BctkKP#dA5p+Qf\rXrej_T2P+CdmGXn*,C8;%rTe7dF>(*mpP/8[2k?<@ojo`;Ll*V*/0/C@p%mrLl*hoQfQ%r(@'p^nAbSE-%(*i",IM06VB-+,-*:;a](Bd2]e(co+UtEL'0LB&%?TmkBjrnW*90u4@WA9d/j9eB82Y-T=(SoN<H,ZpTp@T076n\:5J7oX7pe0[gqkr9IQ?]=M&H0ecCS3Z7$h#WX.&BBJo'_ViNfofS%ZXi'=f?A'BUg1LL8FK+&F9BKjL<cYhb,("nC^f!=8R9fr`5e*:QSaC2nhRpq\hR_Z%_7N=[E.CLVG#(.dpqFuaegS;6HCS.FG!`W%@C,4pLU0j5H0(F"l-`U%`g]\hPb48T[qD(E\g5<M,r]7cCqAio;D)8#\I(]7dj7"5V6O[^-(u#7D12oHF@j#bI@em.flTg2W?1:E%:GuM,paI:s>hO3j\TA.%$BLQKQW-tYr5sSrl#J42Q>F..>e1LrQKoB";f)5F\tio%rgSg'aVlXu/lD_rV:0k9JZHl&QWrS"8W,^>%Cq?Fm'(V:,R8'#+HQ@#_?1Q.Z\?kEtmE8V<l&pk=<YNKA9p\8,db(njP.\m2I=1J('0tlrHWc2#!9ns;S;VS!-IT:K;X%MVl<h(r%:Sc/KG+JDLWSYT2m]2O":$'?&7_,]TM*FYDkmau,R3Cf/b7jodSaTYpA:^3OpV#]5[@2A@>q/J2\'*l>oi`%Un,NYQjXc$Z3Plcf%0Ngs63*ukjR?(2SoBfO24sRq?Wk<3"73Zd`Do]($Wk^K9g6jGD0)8&ih"BJU=(m#,cti%^n#sr.U`9)&nG`C.#oDD,e"Oi?G?ME!%A4<I%]B1_'U8VF@QbRSekF+L)P]AFg)u5r7bhTZoMb!6q\adS-Es8.L:&q\HSq[.>fIr?a>%!9:];,nOKBD_ifB*9uU;g8[h@6jd%0SM`"bbLBbKEutA$gIpnZH9NfF6JKl^ujbqnkFmnmmp/oTJ=PB2[Q@G+hpnS(Nne4?Tq?I,)7&qB1&M`3_U(.Q+I+0e+Xs([MoRR%)W,G2rJ,s*?$bXCcGo!UR?)EqZ)GODoun5fVGs4[dIT@i-SLL63pCjPl']BlG'7;*`Aa:.W\fVR9<=]M[sY)D@ltJ;.N?u.`eYEZ%ZU&Mu81!BjZk^>'-[AthM.G0Yl@d'B0b\IOI4KZm9K[G.ogsL$f0+R]?@&d[]YUh!B,:(jMe$XImu#oLPpcHWk8k/)q)GrI_6._"%87X-[>0Z=M_^PVfSrmrlB!q8:Xej:*MPN!q#4.&+3r^71Km+kPB*Do,<O3!61]e0i0qK?PnodD8cR6lHiGQGXX,"@H/h-D^bK*b,%`G`7*jef]Mq*`mpjUEerO]jFhD&i60h/HFFRNF<5%<kD<]mf3QeLtmZ?,9Ia1&L4.^ie&8$!I4EcB.4LicT8D\2hLLWK,9EOV;Lj%O,Y<fesou;9ropqc5!BmP\?A=>-iOpOjCS&[*^=2/s]^;`j/'+&sMsOqhK"/r:Zq?B]d3;FS`rf?mCJ9,X:[;03sVbVD2YXjK-S&%cU:Wk%?STJ3]ZuB4`t#&Z8$49@e5q;d[2d=k)F._$"J6Yj9"`$MK(0KcYcP&87NPhM$[!61SP4DjLD@bSh7o$6a\crj4'r8o<ZVX%p2uF:%nY.fl%Ze;1"dY$DVer#Mi(m9./.Q=6kg$j\?;ItE]g&450V]Af0(JIK>gg9dB@o8qrjb$00SV]5K=L8b.mA,mtJqA%r0s[%gM;#E$12`a&(?aik23j+=c+8toc6dY?<eRHbTEs4R)aDj^!F%^hHdY2o')^krP)G$3upHr?&ILV2Og9K([NdodF^n[U:ZiVm76!i%N82</HhmTt0(#+>`#Imlai5l?lYCh7T2Atip/2h%Siq#F0.t\9n@l1t[F(&rrbYE?l&BRuG0XWnnKbb[^V$HtZ.(W&@5rha1NNLZ%][?0[N2EI(]XU1$9>Yagk21QVIoMk$Sq`T'qZl3\@AGereBbV`l%XLbg=4sLa^nYNNN?p`N0Vm^45CusT5!#b0+IBn1[d<j*l5gs%So.?E`g#&mQP]ejRn1DD\rN%L0":SV=eK#6W]RccC8*u8cI9bgP\)8Ic[AQd&6sI(EE8K&g2U3=MA,G!,j[#,g,?K+r=E0B@T")'%Sdp1lf4/QO.4mlLT)\DZka"+9V1eH\p8;tU\JNGt;P*<T2m_jHkA2g%:MS-Ge<s[u:Z$b)@-HZVCk$&i/SJ:DEr?rXL<W=p-pT.K%-#=m&ZGlA+%o:^mBV/<08sMMa.@pm6GO%gE8pr'-A]KW46qQan9"Hliml5T2CeS-*/[f-R.Q,4.n=;"@Ms6)GKk%?pZ"5/.Xf:Q'%jp?eH-GX7eP6JO`ZcZ2c_b%4JMiV%bm3p(o3V2AWk??J,N\%NMUR23El7pXVR)8Z.\[*'Q/:EjcOn`$0CUX8E\GD<]*V=-7`oLk!%Tf`G%Om=J6S:);pJQ6V^\4b^8a/=?6q^p9k.eUM8rr=4SP3sr[@9i$R5]FE)Hg3qP58'M3hZ`OsHF4%*J;Ig/HdT6sU!GaObWgD^%J/kV@/f%#FM<rD4B'-a#M]Lu,j&)$biD(ogNt%H`pjA`6:<J)X)o:*McDfGi=Pk3S),fl[f'WG:Q0$hre!F@0<S:OK%Gl_7/2*?&%J5.Gp>Rj?1]_cdTU0+ag<`re@E4U8G>Q'8X%%d]*1^>`'*0QO9#/!ed@J2`I(1>N05Y^h\OTeiD#I#Hh=,+j!/=HZCp_L3c['q5>%JD@l7nOZIk@*ot0Jlt"rj=$5pQuT-OJLnU23Ij(Z*^0rcMGecSON\R,+65._b*RT&gGghI_ilL[^Es1^>f0gh-_h#uoMWDf)qi5Y%.:9Y-)s=&F-%0(nO'TmU]Y6UW.:;dc=l[)X0D#1c&ME1'U(fi&-+Y=SnB"62B(u-jB=[P:rJ!KT.X&#Qd$\-Kb)3u=rPit<<;*GC%7<dMKh<S-UT@1gTqM?pK_q@j(p\G><2Ui$,qWT6SJ#cpeGPVU>qIM$4d>kidn+FkIfMcr)%=G?d6?fhArR,.IKAPp\4d)X.!T![#%rNa%)S36Y]IbD4,'u'bpqd.&(%V\s[UjN'i0P-kk52*]!ffRL-EtUu'3'2Si+89/5^=P"i[r#P9=_UXV<@!8oTIOuc?hRH#hZZ0c%]m^m-'1?cKqtNY,GouH\^Vj<OaW'n:^1%I"Hn?eBSoH$io=3o'p\JIYlA)EYj1*^%Mdac1Iel&MUYP1%]bJS!Igl)J8^ijd63sP1%oj5CebRN0?r\B4TrN[5o.>*!>Hi:5d\e9'QLUbqh.8<_9n"\^Z=*/REpHH;g:[o"jnVuX:^MG:3=>i[Ump<aQGn6mdD25jW00/e[%DY8pq1A&8/0enWXXuo$Og&V"+W0Pd!ougZ[B"J>gE3J.ck,j(7hT%S9-B8$%pdQ%:KNnD0^5m3*\TH!Y%K6%t%<`InXK)&P3lBh?%a-&#PDtV;qHn9ZK?a_jDS<]C]r'e&`'BQLXn+B>h9=r_mfMe:!p\G>gpH$s?ITa(K[)[50?f';Dk^@iR-,YqTm(_.*Z=Z4$146s@%IKQ14SpIT4C*i+F^[)5RnU(5_gjmAN.,7YnqIOSeik*Z0^=P#)Z+aH@'$l7Nia0BNj-E'glW7J#3JMnZZ>]CTGkYUg]meXp@8r9s%J$34fA!jch35iLZfsgfhXGdRV&=[[?T<sk.hWpNA+#l-iG//J'Z>]Cd[$F\\$GH';8:Pf"ML=RAl^)H.P-R'&\^rLj38bCeUb-`\%E8LPU)HM5QJt$q>W=8/4Z+r!Fb0O4ah40K!dBpl=/>Q9W0eB`)J*K3Ap?8m*4iF.`3>(C1_Q:?GD+2e'9GDR*[Xt?4l)2s/mGn&`%$%O'\nj4/;C8^[G>$jEV5F\42CAH/nb_f8iQu='qR'9U$G8FT@YH0CY^?W@63.?'-A(9@"g."6,]eSg8k?GsgimWI`j0*qjG!:De%13Vim0J:B(M](,+]Qh,-*<3[a2GRjf2o`t"q9(aCI/D^oq"f$K38_>pB:S]GVoH^L;TnhnIkYG]Hhhfeds8\be*4$+H_#&$HFrdU%dehgJp:1+8@daFq4L=WLHQU8HS!hnl?D"P$fu?^,s4PMlUXeP0c>n?eE\?4pHokR>-BI"i/M.smpLdMk]PMm%1)4b?X8/U#jR5eB%KHXKsA(o\c7-F8kH"uekpOKgOM32+-^NAo;5+G`bG<SEtJAh=1S[l(\QS4\+&rFS`!Ss;)^?s3p?p-)9V=o&j`K^OD)m<>&qU*?p%Z2(K7hrt=eY?<3O9Fa3hGdY3&m\65ISA\UukAmKtV>UI(ch^Bp-7MgOZhirabD7NiK#_)>6@DQTJI_;7od@Bio9<OQM:o;K+&=7r%QPu'T@f$p*?JqZKq\)WGdpJ5RX*EC](VE9p7.eu&FIKk1B(&I0`bOn7^!g86p[R:qKoO'NVu#c2p,:,Z+23u:l5+N6hgnIn\`e)s%7h#P6mVgF;B]c\eId,k<AZg^BXVpqO(2r]Sa&imZWj=QY=he@J(\-Z4s&lI'f_f<],%"S]W1BGr+[09"f-cXFe_A*LBe6GKZP(Z,%j*Gll76F\?<tEO/f9M]^_4*mdJF/'F=V["_(%hike^lb>_2b31kfn%Kb[F<1oThGn/1B5WQ:k09;12#!@NIDBG*^6&/8sqoGT,@h%rB,Jk_9ZU!l^e?pdL1=(qpbj$Z3VP$$[utH$!m*IDD;7W:5'Elf@[mb!s<\S#p7doo9?8_?QZ[*1k'Ml.s#N)BIocmZ]ToAWoa]G%kh09r[:6<EG#4WRdJQ'"]mA_hpX\ecB7\'c1*)Q.Mp>X=ZVIIm?s-JKX#.-2I_]]Z%99NSr+`(>G!,`_>P6!cpUGCRf)!JKb$+g-%s&F%/gstZVRhn."*FQ6!>;FnkIAAN?'\bH081P2N4/a:,(,;LqNkR@t:R9Wl+TC=^qo0g*p(iPa))0UamC3Ua)Ei<M7Th-iQ(eTc%AKPj;AI;i5rMNe[p_cm.:Fe!NIVWD4me'G/!f5a+bB`X.fdu.mkh=`AitiRV!<^=L21FLb`&!b^loVPnEc2`3e\11sCY!C=`?+J*%C&VpX_T14INTBi%?gK.fS@'48@D_hPigbu3b!)A?Z+nA9[=!>TX3d+-G&_)E.8Op]C2];f,;<Noh[u3r%t&=)XnX#SX8\VAqco"Z%?S,rkU+s1f\p_!/L2du`meF3:!o(nQHhe.'q`Aasr0+8J\%B'6Qp*dtgVolXJP-'.U'f5kc/[IW`pLfQbY*f</>dQNMm7>1=A9&)%W_p;0a4=Ub40e^I%3opVN96qJX@s"S9f_Z$4rDmMXUQ]6=jS0C<l)u2LKXl9?PY/<m"-,Ee`2R5SG4)rnG;;-aOpi@V=QLf@@7%)%^"(mfZB-a6<!=@Q(#TP3el/B%Xm%G!booe0gRbBNnGh?LG^LV&io8MjI]H#lZ@p&E/KXmX-LK<cmXBjT0k7Z_.E;=.<l*;/M/VB[%k>so`GIJmEM"h#[ibZI6ZP%7afk%SD+_M8qD?0-YDIHjr\^<PsQKo>#if7Mf$2Vt@&6]R`"WX9&jb;d]Mo?Emnn8>TVm(793I468%][ie&*W&`VBZ5qgc#-GF_`N$Q[EM?1[X%`C``Cq9'!!%fTL;g(SYU>g++[Y([qdP`2(/9=I9tR.n@3$ohQ0R<&9G1]5G+h^`1*[c%%Rl*Q3&uC0BK_Z]pnCj[io*.'ELKl.>>%$@Z#Rn$,--SS^P_"N'MGT\S`;S"2d"jfPEI=PE&VZ47K[UcnG\bRMT$EPs!!/*j#&_@%o'?j/?I#LaHat5d,HpOE-W4_2-FfU<g!kX,qo74Tfp,n7m#0r+ZS+@;r"P>bmNVC30;&L=$973&qGI"bO#Z=`NGItX+*#TRl\i:9%J&F?#9uYoZ5N82C?R"q6+*#T2Q&'ed8"B0*qYV5V3K-V\4oZbP3BNp?GL$qnF0mbR.`=FZEoZ<6Jf4!"&F](s3J3jY/I6q)g;S'B%S#e0u:@:mka+1MDAWDPNlrN=L3>US,T?\E<"<7u$K0NEQ9UH3hP/'Z"Ji?F5OueQ#iMPfG^B):.r*&na@[Og2Y[t$USQqPN((]9H%1<XPf)Qdq0`pZIbc,Jtt-%dr*J%*Lma!St.]8EJ.(4Wu#hK\q'D(o+W0!_Gkfj+R=OnZKQ^7UaP5BctJ>%DPIqu<dar#ft%JK+CG%jb'K.AnS;gqr>+b?7`c</['#\k&K^u?10V>8'QPV2VM5.&'\.Y]M`'B403=<#OY(QWdW\S01OA0'+Pf,3:W4,nEK&_[sHg/BH,RW%CZH252HlUE-U099^[6JP>?bp3k:^/2-c*g/l_dp#C88B5jdZX*6Elo8aU=3nhYP7dE:[u5ftj`/`cpHZ2*R:pGs(qW;n4KMS$@%_%5#3_5otuX>XmRARS9@@[K-Ee<nK].U?+4EH-T@2LcF`f(T37S">>FSGqQH+2e=5RVr5M(e>V<53XK=D]h0o1_qsi)2[4Uk%qh<CF%osu2.5Idkf^O<PuqWmspNjX>E:_PY:B4+Ck5I(UUX>^!FQJH>.C?0tcHFIEjCgA^"R3W*bH2!%f]IJlrm+9:A1d_uS8)P==0efS8%5F'afRH1CNE"Le`>gP31h.0]1`d[pXjYoBFr;,Q2jEDWlQlp&QKJ\cAa9T)'pKBb<ai/K"^sF,R4l<sc&)PWp?u>=*2C**)(S.ap%.i9)mBM!^G\:Q3h]sQni%Ao32/T1ll/aqq#4nJ71PcXc"!Yr7n1i`*c@7bM)F.@EWcJhaeLC+d-nu>g<#6U0S3p+uD*rF'[^&%BS%'UG`4Ye5=-LG&E8BaSY$>ENGVW_b4cgiEnk=SISL[Dd+Ql^J^1a`F"!Bc7-g@e*Oq<e^;M,1O-(C.tX'"n`8TBP98lbKmaQ(QMjE%][^NTrL/4b4\O3[pZZXKF77dp962Dn.JC(0T!%NMf0=#o@Voqp6LFT2\D,a4Zu$H1Dd;[LGAZC>f](e[5(D\K;6APWj.\1S1fNb;%<#-$l-M3r_6e?Sihd=*GZeTtVc")=aWNj4)./$QBE3Uc#KLn1l6_FQbbf8^J-E.A&J9:>iO+s^nON_GLWO-e1>2u'XA/OL]?GZ9L%p#ep+)j?$eWuG-#IgMnHAr.P)LZ^M!/,g;[3[+jj^SKDOn&HrN':0V'++3#U,!YRJ\N"Y_;t5'Q\la_NN*j8&Lq)<"3t!H4n!:JS%r9?5;ln<.jU?CLkrVHJ'WufjoaF(?k"fe5)D(L*Ai9i(U.#EN$$Q9X>pMGeHb<mO_o7g!.AA#luf4,tnM95&:U^YqH,fG)moEl@P%CU"3^Wm>&([)r942&i.?Z/F-mjQc&*&Y*U^a+@7Gaa.6n+=XmEHFgl".0:6T=1>MuKfYSe0uLq!W:o>lP!/d'ZO-Q:Z&!.\p(oD"%H<V,9STc`'`hXf[H-p,DkM?A^s6p&MRI"kt&%Q6T4;M,"'A^ab'@.^m#qtO51=I:,D47)E#3nO[n<2[#$R%q$ok7]#GR:C+S/^0i%l\+c#ZG[`#8Wimpp1kr7`ps&.%g:,3dfs9,TX[p7Wdc/RoT7f]0uUU^;>Cg1"%9od('hl'HDhQb4>gS,.S6FH'J%rJ,@r\3#JJo%%3lPQe\@>YF7Ys7KL4:oO53Wbbk$'I,kqs7AjJ&K>,!P1&cb?GL2i<&gT%B'=fe<%&;@f)a"i."Ll&l3YZ`8U03DNSj.K@:<3OSu9%q@C4!V()E-O1ODfA*B0W@@*LM5bJ'bQQ2>X;I&E?]&_6@L]3N2c@TJsXZu08o?CaU95a.l"0J:MjKG6Y-]bir>$qdsq&&.C<`'7+%Ts=jkd8j,.f21)uheMBZbe^_^o:jgIf#'eMW@<?;2LA4:=57sPesemA><@i%btcA3dshT"LS'#t2Q`Wg\M!f!&\<$dRUp'Rk$30:%S?Rq5[8(Z#p8W>kDDaJib:<iZh;(*JhC,RlWU'eQI8QR>ClA`M%?KX*#'Bq`?BgE>)Z5*]GNfG5m$1]5'uu(?dk0IB%#tf3q$fRF%_O$kpqRc*YGKZW)NUes@I8I5/YS'!j<V@EIinHaqIONm@=n+UAK/nZb1!IurHY-B2dXKlSS;Q@<B%cjpMB@LXq5WN.2II*+A_47<%Q>8Kl`ssVskuqZM%Ou)S6V[%r$p;/g>'@l/*J_<5[0LTJ@#j>K9H-NY&2+Hc4k"soYU0C%pFHDcGHib2)R`@b&">9oJ-8]Fjd,pu%g3n50H%6"D`c90-J6pn;@/13[^LDjS1hU#-hh$^k.Ef+".JR@5XE(c_pbi5a[Z*74Im\SkkS9O0]Ock)`O2q3j]=^dfOZ14-+)Gm%Fmc>A]3`JG4mItJpg3d1AG^n9MaXf.+]`N:d,bh;n%*Zgn:8H5JSCLu'rW7Z"%GE:]C06f0(q)S69`*oQ+K?$ZXIOPLhf=-Xp5Yk%$Lo^@U(:4F@B;&=oa]!cF$0^^Hj@7gKBEC@#T\hG&*OBlX4M/@XE^n#bp33Q<U?5ig&Q-:MX@r6;RYUdI)@>[=[5s%%ra=<a?:4O%KUD8#U/SI1#!cRp5`YY'!sO\q0F,bT^/['Y"8[qGiOM2R*s=;$-A=`7])erG3t022$j-^W_s2eBA]k1U-l27fKPIIr13*p>X`l(%%RK+T>#6gpf^EW;W&c/[:V28$8=XTsGUdHR<;4-cDg^o_je#KpO)%bm3'.##ZDAge?f<kTQ",@u&K+7ssJ=YqL5VX(bc3>>th2:1$%3/E)K1h-<?P8R$IfY%81c8C.n!Z5Yk3=7h8KRUmp#OiKOi#!S0d-HQ(_!AF;="FRn)MTWH]s8C,<""SS)gXJu<o@%Q0#950DV5't%Ag?a]^oAL\(>s"Tp`&K/(r+]-i9DLb+E\ZcE>s/MYu!47FkZrjYX.OV$i93ViR"g]HS>N:Va)J7VSE27"G?eiK1+4uI$-!)$qW]i%.h"C=F(m<X*g8e:7rGWbHT%&<0qhAYF?i0c4^^bnRXk)_5-?=,+\I=+-jmV"pdAp[7+LCFN0H$=^_$tZ`3FmYIY_jN(#*ig,nLSG%!8Nt$1Ca&@NFV:JRe)nY_*PDi!fi1*$0^+r1gqQ8I2J*n@BUg^_ZL`I(`gXR)5/W/_sdho.TCqU#fT.U-'WS8K0eT!j^HeY0;qu2%W_:\#SHY,dOn3R[!^@C3je.o-/:i:e#Bbf11:=no6F:#_0U\(5I$=C2L]^t6)lODPjVh[]2_F5,kW$V;7iDNETWZ6-Cu?HU#mjr?%YQ6Wj;s45ifV-E$N-o6*p`@f*#X$+l(9'3>0*%jSq$_gcD1!uZ'k+Y'?K_DK"'(^GJbM:AJhlP?0Y)phg^J!&r"!:FTjeGG"PAG0%b\'0ii-cDA)'[&>^bnjG9-o0d'.A?oOY5_7atZ^)_$C:m1=KG[Z9PR5T,&!(2l\e4/an2>a+)X[J(;SheOQ8.&71,.K(8n-2kjU`%&Cg??5A?4ko2%b4gE<\`_fdl(M;r->o7Xe6Cf>re.tV8lBU^F$-;#j<.[,]/0*C3eI)T>_-l&E%!X11F(n"Vii$aogd8G9emmr$O%r6OV(p;k$s748k&F=q6KoZkkGG(F-chf+tBo)d[q+V&0rb@:e^kV/4`$h]np[\LZ,rV$V8mZbF%,5_C([QB>uk0Og\$FH8I)g24f%/^R#qL6F!H8(2DpRNX)3ZL-\:cltXr?0XN@a<q6q&=d.\%_#^V#'IaM#,XmY"L*D![4\0i=q!`]\i<k^RJf@J5<7a*<krZo;@R\T%+(epu2#t6$HDUg2dpQ:n&n'0BhIrA*_?:WL+OQ3R%Q<]q;$7Ja\JOr@]FEc6fE):D9b(>M6lDk9(=!D,#ANI-9Ei<YZ:kk#$4k:/%7V?a2"H99fTjJ'Y\>Eaj2$sVDJHjk;0[E42Lh8IH<t*S,3b&1[6j*oc)Za?bY\%JY'l+)HOFgH"HfgtIQ8%N-i8FMO46N@t6\[\,%WGc0nm;bFkKh(Dm]9@O6"3-p$MVsI*I73!\'*DYO`K9sonB`u,2.Pi(k!<?SE0uTS3'b(%<\PRU#m.+7X%*/28s,kh'0IKK6<n`"%J5pRso?Z_u26fA+*gb.-Ep6mDdfEr$K7O[W\cHkA?lESo1rWpt.<J?Z(M?i9aB`p#<J3@DpaI8B1l@-GKHV;Gkggl0bmZq/5Co`5%^LfHQD?);m@0/5o7:_k'jT4O#/GGoGfIQj6e`e'q"/2QQ-+r44!ODd)Y1^`(cj2A9%$M_5_3p*n_>Mr<iblOdADTDX:LH2%js+9T%W?*164b5P#G2iR4K"m/k"e:PU5U0fYph_IUY7f23/:.?7%TO0(PVY)'<8*KED&7quH'&/_-5H<mo+</0JJmIK'\LOGYXE.Zm=8,.%VT0uETe`i#&2.JdbR&GX,I&%fr*%&>J9$5$iRB`F<acC0T@9L(OmrN^(6sK%YC7%OOcD]%Ci.,t6YmH?pB+TG5irAlcAQH[JSDZW%T"sDIJ8'&"-_<ui)9K+kO&`F<5nA6#2=JG`nBh(<odJ.MJC\`.jacf/=X!>Q>Ptch"u<<B9uk$]@XR@K+M>/)5T$)u9F8;^8pPe%%$DS\,Mtm)k-um$VhHjWRs8*DQRt&9tKN-ge/rV00A-,5A"2hs/;A^pA'#KR@JYda!]>?NA+Na`m(s?D4"q%MYD"oaSLeEQfpTq7X%lid+`+d782B`b@9$%e?JQtHM.1)O5s6]HZ2%P@a-)"b_%)9`;A$%7U,Tt]q/T==f,VaK>-$?3D$Qek"-rdcYF6\fNL!"OoQq_mcC%`Om=\G(?U#=@ZIQ*1*dqJ*UK-P%&mu&gJtJ"p7T:-LO&M7cQVM_e9cSS6>(-@KCg3^^t6&>/b,Ps"PP:*Z5X)9UtB6],8\5Td(mR%`Zm0F(L\i)<]M[5(fJ2<J7PULP(fT92fo`BS/nuP3((Mn&R6si#3CD_+*<PM`9BddkW&KMdEe]$"d3D+^qt(cN0g;+^f\24n-p-V%BRhk*02Mlp\`>*]#Kdeh*X6+o4ba8h[:FjW6/m_e.h>?*K%L\K6<k($$^ct.ZS:\+fOYG4]BN][haV3eb:m<g!I^"\=0\SVR$`E<%7sE$oBY%Rh@S'38I[/9JU42h9+Ym"1acN84RJ2<A)VtaI+(NC%CW+(q.hW%Y`5JKE:`U%=O7>]0ld:V-*Fmi"KVO5.-fh=_huSt\%MkM(H*OqF_jHI=)"+9G8-S./'UrP=&m/XQHCBA\*?u4@-d0i'A`r^2'1=7UqR+;YfrOjY]9`NGf+YOc#<cAQ\#1Pt)K132a_.*?S%0_>iojc;"8fG#i$FDTakK8Y<^Mkf810[C-Zm,+NCP[j9u))dNnM#]"Xg\>B:'u_jT*rGm@U7S-,*J68\Z1t0?<c0Hi<Ph"o4M^H<%K1pi]^pe:a'RPgUB40NP#CXH)GEEmSNs6]5LP+p*kXLL'Hr(a>8Rm)o/LpC&:mBc89\a\O%,,H4d4Ra[`)T2o.*MsMQ24-,AT8E'%N>`D<\SI*'`]4=p0X(ae#r-nGf(-Y.@aUW(#%n*rDZ"Q;:k\Bthqt+PN_r:nU&adY<+@sW+Kf)lEEp.e]1<O[^k2@`6:0-D#Y\m`%jonSf0!;l1k$`d%'`)bcN;!:u/p'b,V6E'D=$HRbH@l1ZBfj&FErgBJ"4k>ePs^bJ*.W^9@nMi:IkeBe!"4!I6m-:R#r%'bRF!Z)%,Cg\kn'TN*!DG5`(IAD^jN2S`Gi\!0$81(cC0&]$63(6_5l`EG3<AQ_ES9Iuk(;Q-50"XeoWZr?=o?,:fG2m[(p=\T;Co*t;$JA;%Zu(Z2X$^-MD9RmQ!WrXb<TMk5&R0WL#j<L36)\Sa4]VpR7GCs-Mt[\Dbe=QQo%JZsZBSEF;7gR#_2R11AOLl1BBBtCV#k$Ij=Z;"%%MAZg@=6FS(nmV5JCi"ZM2S1,m73%)*8-.XT'Da]2RF)b!"=t"Lla-K2L.HqY6W\91aYLjN0W0^G&q.eWP8ZRK_9.OLDd&b*:6JU%A8^njWW+mES8_b?Qbt^=iV$pS*d&%e,t\qrR7S6q<1Ik?SbQtYac@VuS#Q9#K+RV[#eh)VMn+sJ+Uf%P9=&Ii9H"&`9$#oM0ZcF#%m1<d^[;hL`m?)&f#ehZg9U-6,BPYga@r?)+.Tfl?P&)deEd[POBFb7N;\-65JmVJOSg(E&T+7&/bBQqu8u_rPS>\(b,\C4+jMO4b%j%-JSiH%=<)fgl<_Fk2!5SZb2]<o+C=-8B<N'=s3@bdrtLO1S7#Wkm#b<f$O)c/G#;H]<s>l^NI`/fn:JF,%Xj0S-%i^JA/T4-hp%r?Dk.apP!K8\mfM,XceoE?Og$5lqlF5tAU9#D\+oRjg)R6lub?)gN>UBLWIA%4Ytg&/VC@BA6bgHa8kX3haP\3^dqUJdHl/#Z4Cg%X=_YX`nA^=c<.B:`H"_\MG,=HP/IQ;@o:=1H:$-!G'7k^'Wkf,9k`k@NM/M!j2>_R'n&O>F;WE@&nXne#uaSCoYpS&(kiR=on4.u%92\3<Su#;O`n1Vd.DZ6i.-aibA;,#pOq>`Z$DIYp_DE?'_1^34&7J\BOP;#)r#f=i,RGOr:hS3'>nkI`-</VYJ<A\'##UO^QqS9K%'i#2+Y1m;QRUSHU)FTs3*Cbe?Eg<[kc@?XR,%ss*H`WH>6Vl`Bl.JU6jUA6u$(b5k#lUp6AnsR40BI8XOEg(&d5rAgjjfES$'W,W%YJj(I`uI>I80ll=fWOM.(c>^@J@d&eTHJFkdbI,S*QfqE`Z\7O8Np#`_.sCP*#&S:hXsVX`d95C[W']lC?L+^T6#KhqHfUT`lS48%10KYXRhG?A\k+(r?jIp-,/iCNDCX/GHdXS<M-tk:-^D/20SFC&jbhb<`1btBX-*\I)n<-GQicikR&bo/Gqht+_tkTp3Iau=*&\Bj%!YJ&Odi9$uE"G@q0@d&b8\HZsXs\m%'s_>l)n@oe(?'%pEj;EU7["qUFSX?a8C,NCP7>2:[uLN,"joFu%7VU^A`ojbl,RTb]uN8l%bs,d59;^[iR0f\8,pn>;&bh#C;n0QEi!`8gU:q=$hbpcrPJsR7`$H5/*s5"UKPO2LPKpXk0\_c+^9-7UV;uuV3QB*n&o[o<\n_&D%R*HS>;LpOK%ZcHKJYQ=Skd/(d<,fckShb[M0S(k`,qL3W`K;qXL/SX]ZDXEV5U<[nE<01kcP8I(%"]u3&Vsfs"V])]'hLob(b,f#%:'<K<`?kml?q2LDF+cYLn<Huu/]5*m!>+,FIY^<hLCl9>0^cFGTcu.b*27-qSgM\i&F$Ta$4dOg5n4J6gCo$pK9h;aSM26c$2VMr%8O_ljMDH*Fg94p^q3pCS``V"lGGXa#Ku56F#U-/I#k#Qf'Tr.tL#PuR&ejQ/lO!]M#o_*qR;2p:@Wqk#,u-*^%I,e_H$FBYi55A6%>buZK0+6;&6<s6i_Uc5[@"!,ok/os#KgJQ@;u**(KL&TL@<=kn[5-":d>'gdm_"6?[\`^&,!ruir.%U;\qIC$KW5S>_Ef<8+RX5?%aju=\?)?SU6\Kf]_oN,k";Rc.'Z=KQLn^l^a%D%D:WAQX=m.9#92^FU+_[\RY(0JG@EbF_r'-7#]7=<**=9=sP/(`B:VA,a2HbO2%M$F*-g&r`SOpHd<COFjZ2ZUsjLWDAi,-4((iV=u@\tEjg#F#*Q19-;qQjY6@Or/mLZc*?-<07hZL:7oo9&U(>aYMh.H=Qdd=,o\a%7?0\kPX:LTWH3>6>>=lP`)<I>.+lo5CX7f43.k%Q+&\a*Kk5kM$#YhY%1`4]b<[7!V3rj5]S3nR==7O\Uf!nD@VGDQb<e#Q7c8GP%hpnT\.+)QXeMK#14:<pE&gF61$Gr]teHASkFa(o&?sngL3;O._(`B;LQk>"E!XqNeM*']uln.K8`kRp:$q6s-+j;`O]+B,+(!B_?%g76'"Y:nMie/GL0d%IrSW=F=#<e4'r>bi-?DP/hBX.#5+?fYl-Fm<u2@Nn)F7`q2HNg%g^an_A0iTeA2W59:N.B"Gh$Z6g#\TA,+%nC<23_%B%6M<k]oIp<gH\XjJN/k/^,jTK&j!Yn::<eWS&UB<3q9AD&L!RW*;L\+Jt.TT:SRKgS2lmo2&R-oQH\YI&)mYFCtZX$F.%T]4ACJKZ&R-&h9od52kfI2EL6S0>m-C^=#i)-1d7;Apep5/2]#qB^i3#Zo`Bn&7fZ.Uq^\;ljLX>HblQXk+]Neg#iiZ*O$.j'_to%oa$X!biAkI=6+IU7nRXI<N@)*/N:9=@@L#.q#_cP;icI-WK0<SlP4tjI%4;4"C$r-Bb5'jQGQ:KW[>$3QD#(j"@4Rp#.#o+7A-)#%=2h.,H^:^A-bNE+&M*tqrNkJkC06Zp3d,%a:,lu^H66,+;)ki^!J!R8W%6%lC59@q\8>Q*DQ"I.NRTr+''jCtNtb"ORY&UGNIn,0%\-=b!Zq1P+pu5mXM%eX4c^5e?gjD..&D._8]XZ5(%SMGs/L+ICQEqYI5b"BW,V:Q?'(E$EZk6`oGR5E8_&Xe*%$ChRG$fknf(#OT%`=s$gU6,a#()f87b)A>AaJmReOi,(].FX2L;c,<E/dt=9>jp[K*#6?L2*#E3.(Z=oUqB0f(kfiZjUd42bT%e2EA8bFeEE<(gmlC:%PX-gnXA'RmEeR_t'VAnb$'B&%+O[OZ=0$(nA[;KPR-?JaAe47P"ti[+eF'PHr.2)d`2FiOno4=j&!dT-@e".E/i#18_?uOKEHW!G%1+lq\U=Zo]j7>io`H/m-_YIJ^)?N6A9$PIEgtB_oR.hg+!VmW*OoS&nM2OJh."OWXG502p_L-anfg<9h'MqDtUo^[PPS6Qh'[`2P%UE['61DW)?_kc+>9]%VuL<P=++t-aB@b"LIiM0?4S(\8^L(QCqDm9j,ilO%RF:TBZ[PL\!^iejC#)4Jr)I8:qS(&+K@9lBrA.)to%G)G%:,-l".6dPgbAL,@X3Z0Ham>Pe1'Z??UiB"WT(tT1DPOK0C738d'fp*.>eM1(HjqP\$(lKR@1K+k%aFD/a]V$"'(n$\S&4W2.%"b7U:65q_*6m&>6gn#H_W^0IV'"F^Q1_ZWlHkN1s@\RA=h/QJ+ZNA"<RhZK$`00u;;:\)_.>Mi'<3!$</`#i!8]UQ,V=8`/5R$,&%U,k[j@0I=7M2jSUOd\=Tr2A/>KBThW.LTB_,a'W43GW@f#)S/V[&?m4\_<+oA4mT9g;A'-8=6!2R]%ZNEYX!kpN.5a!OmjMJR3.F%^/om)/YX$87T3aZj+9p5Z+ULsRHRr\G&0HXCKuD%>8^YGWO&l7P+s9jEh.e1$e&`W1^i?$n<$mr65Z=G8:;[tjmc@e7q/4WBIZ_m%Wf_'l#i^Kt#mhAb]i]@(+EG^uK@rT]H"ul<BJ!:ne:=3q(icU"9(J2mm6qGf(u25#g_`HKKS!>n[0<'J"EV,jn7aH;C>Kd\V/8$H%>2>%;09OPC>6]=$9ea*HBE<E.@ZjT!WBf40_[on2Ld\<23K+5=&7^!b%s8$g?ghAW&!BU-lUOKf_[`N5=gk/RcE>.RVH@r'.U&r7%fq'd4&1ooqSku.jaU',<0$+on&Amh5>]R.'MQ#Y%V-MtO#fJHObr%)$aiTjLQt"1Zp-nUL/32Ct:sa7%anDPTE5ZO\d*o5oTq[`I%%=K`SGU=H_KnA<8)-_R'@`R2A<n'a@<>fE=FGO=W5i3<rYQ@@;(E2;o]2<4tO)K;0)FS))2I!49*E=u2B.B`PUYm)C%Jh4T9c_6q%BaW<53XcSO2$-3-C/==U3@ouNQp?eCk)4'i>+!8Bd5/2mA:)2>PWI/)X0#8qH@]N7^4aq<@7B,&AkVqNlm3I=&B7eRKR3:#=lg#M%OV/:6-b9ROEl*HeHk?W-UsR%p&i)ZFVW=20PW6>fT:F)^[$W*j3MCE]E1*a@DlD6I#]m*Zn!h/fl_l,-I]>f&S1s\l]<Z0H,ZbVd%3KYD>:kY2Mq'$S&AjsG$\8&>o?W\B6dJ>%d,,[kG<Qm6Ddir.8;3B<OJ5C2bc?O`A*C6/1q-mR1?Ae3P'b_eq;)9F;`pn0$m")$'%^0&(rVFJ;T>U8H$ZH%">j*POL+S#*f$pLeXgbpHj7uHABEoQEN;bZ*N,IUC)V#ZAHKYGHk/eO`ho:o,u!Y[82g0>mKL(Fs:i[?d@%WTJ>^HjC>U6TR;-DOhEh,KpSV@67=U6]qn)"N&h^KCLB'X%7&`Acnkqj:o^5lN;Nl`,H&D6W$%B^fo!E<7gb/jPc"7&qeOtLR]M2%9QE.c+X'PIk@WO9>"Zht`]WmXTSY*qBZ:0q7tYMS,R"k,We<ou(70DCSj+AXQC[^0CAW6m\PauLM%H'-G9bj$f\)KUpH/;3-sjG<%)55foD$aY!@@*gd#>#7fLBnP.C3'npCOeeh+V@$dekBdk`T(F$d$(c4+GfF85g/Q8%;4V=Aje3/41[ui6.&LO6=d<\=(EiX8k21"%&J5'r(s6+o>O<,gNX>Pt?DJ8G4NMLKp^p!lhut$QBnujecq^f2i2QOZE%n)1O=V\$P3irOc&qk(MR#:9k<bZAD`SA$>4hUkrO=c0%e.-ACnlb7&8A,];3olX0^F>7;B<6\0).9lmSnH66*Er$hJDutj2d_isZ@N._:aHc]UaIQjG1m-F+)hV2I$K5_;M^+-,)KkK4;'->%1/-IhN`gZ@!r*&]ihmYlfTNWVnrqoA^q=(hoDsHb(Mdsqis>LW2%[V;fN9C6L.;?eXTf@S)\lBcSni,J1R(2^&`PL?*MEiX#^p.1%-3P.cFb<7Y$2E8p,:\ePS-9dhOj)b,$O@o%(jq/KL5l%Ea>GbYU1<t3AK:[ZX$us+Q:UnZPOJkregF_/ZrmO")l(ar!(X,)d=FY3%MbZ'_%;fFR7g9*?P7a.+@V#TYhi<q@kj0q'KK1,f;2H`46YM:41+(t<a69an%A.aQ!n]hF#S>_n@H#2HFQ*>U8AMG56\8s<8c\M)%+mr9??j_UC@'bi4kY2.b(sfEL"R+eudSW.N5:.>1HcBhGE3f][P7J8"_A@P96OGha2Hd=6md3hUA-NC60jg^fi>hDGg'E@q4T]+m%AW.<Y[(/>a=Q1J79I0^m)@Q=,(,?ZkI3=1t&4DdD+h2@UiaE#lQSe%cdFfn36[ig,">I8<IG\*KSD57qbEi!(R9JT-%B5r/)0jM:%+n:hS]V>%UBaP`>]#V12&;W)Tb"8X:1ti:GfTNZEL9r6iJnl,MUp<)7)@`k71Eo4,.SCXW(NU[m^M?nu$>/:ki(S(u^<$5F_=2\A%eC1;V#YjO1.%>GiSrc5*#FVG`*32[L!N-D<'M*`tV,DgXZ;B0ZID1o(FiZ>&5`'A_[MW1F8taEeaV!LlSVo,aRqVd<PD(dcLG5SU%Z!Q]X5Q]ObmN`Zk`)$Vgck@`Q>1.bF:PFYg+](B)d_r$#Dh=)_HnQ$n.n^$kYC^D0!&mmb`&GISJ3"eIKG$3*E9<9B3^P`9+Y_1b%mck+'#*k%CX4s/833+/qaqZQU`*V#*#>.0KHf0L#Tl97nHpK(Hq.gPl3upd9^aog9a@%>uBCblD76sS9Z]Zd`Pc>];4=K(\BaFKm%+$7@K%,3.djr#=IK(sdAn3'(bqR#pT]4_K1#)+^TmcZ@-aq,aR"PJ&#E+.0kY`r)(93FYEl(Hs:al^+H72Y&Zk#pVK#87d=aMRLe%Sa!`8ATieG=#R4C6b]hT`2EnY(VYsN`2Fk)H0@j%@jV>R?7;Qg#dZ7VguREb%\hgiWd6R,8i>O+'FBX.*^VP8lH#J7T6qNH6K3Z$%r\g!.7^`Idd8p_hBf7<>q`7,Y.NQN64bRcpo+36,c9t#dn3(UoGUZ_h)+$/B4E<@L'a3FcKPMr."f*,;9to,gW]f69n&\J'aX-(1%7.a91&JY;_FYbD0YE;)s1).qXLl$l?2^8<Z,G0OVSoj3ZY)=uHa5m+,30em=&*[1>N#g.nATL@sq1;='/r>-E_5#-VJ>b!K':!Pp%]u-p0%MQAd9$:TN`V+,m?FUtpAW'g)&IN/.I-2CT(lb%O*[,8uDTkHXYW5,\g`l(f6;Z>d:r%5eb`A35RK!4nf=1,5P2jVH6+oX&%)R(#VaAhGj9=lk[(c]<UiIT$"UJOm&)t&X34k#/ChET,<+>^dmh>-(Zo2A6q78dZ0UsW`;GCO]?.\=f,.,!FFZ$j^.1QbmW?'nbg%r`/Y=hjJB;KP$#JXWd0Z*V3^Q&SEs(`ZEa>Fd"%>@CIp1bn%1M<1\_*0*ldo`8KMkJf`jg^^sk'5%L&$78r_?pbb!A"NfN`DT/K'%iNY8YC:,bM0Fec+Uo=M@n\r"P_`YG;WB(Eo/K7L8Sh^6agp`m?$#-l/]7r=,f<S@52bYC79LGp)CiFO39hqVa]SiI%4iaj-X#iK-%fOJfFMFDgH75]htgdMao9N?b[8R`?RE(^MR9.Pf.S-jFO/+af!6>-/mBDk![-u?<Ue=&T?P9m$$*#&epGk6hj#%47F:lS`fb`%b4%TTn`TW732elgeV,Z>5VrJ-HeVbn'69)[_bGOr+6WV\M'dnT]l/,S,(te2#m5q?ksORt!1M'TsPtU^u;e'LtG'M(BL]%lRR!&KL`0%73cm*5035HkZp$=l*YJ8Wc,63Qd]S_L5'Vgi2nDc6YDhPbJ/E[?T0]6Fs7a;S/U6:J`J#bdp-l=DqFo?N(CMr%&)Gq/N\:&R?=.h%Wf?IH7YpEc6LM^fD-p"b:\:IuF&`e>p_=0(cu^ijUY(7ga\PG0j'HX[jPFh(a<D9.jB!^X9]O2%JLmI3f/H<C(]lR[ljUm,`W:os%kF'!rU?>?%?ke7!7&'&2CUPp6A:lip);;.tZ1TUlg,&J!m`cLQ1n20]U2u:KB$AXVRH&#sZ\"MkOFpH(.-%O5Z]FnWcL2jT8h_ec%!8Bd'jH\PUrb3iT5&!pa@^Y>.p^FRh<F+bk"'UCc3Gd@O&qC/U5ZkCV)!_W,c/]W)_<+9LP/#R]pHc,'ibZ9!\aHj``^q"1)Z$gn%;&-%$B(mU*]F@J7<tbmAs%Xfj+9!If,cV.9ItSh0PTbnVfY\a"AT/bYVCiikeo5$eAt'a"O-#R[imCaJB@hJ*d-9.u:.H^L83fNV%oMC![cAJTE?\R[^:<oB-GgR5]MTqN,VmTA-c@L#D#=:J9MFCO0h)2LN#X_sCL"=@2P<goM-biBH4=C:8JaO=d3t`5p6)(['#0!`I%',!&*PI.][4VlS7("(X@\:R5!GT]j`B57XB@d6(I$@+g1Nnhb(ATaS9\8.I!VpHb,nKo$Y*CBpqdPY&,&C_PodKj=9h?&-_eb]oa%c[?22<t)W/4Z]_4*X-$+,\ubV`b`DN\tl+2**B;p.tuV80fZ(3VWK*?G,GD(/Wo>@Fe"p;rdC\*E,m^\#bbTIfr0bjQmHon#b4'/%]3C.V,<A_D"+dB(8dLYt6+!A>29O4c0n>4,HqHl"]^%2*oQR]S'VqS%`!T>!7f2qZeH*.4*j<[!L0*oTG'%m7@Dd8-aEQ=F&SWc-%p6feY=reKPL\5_T80Z9l03]X522*LJ)ZOk'edg1i"LP7EWK^HFC[cZqA#])'.je1d`b:#.@=ct5iN3rL)K@Uu.G5nRLlgR[ZN.nd%gi5Z-qHY@&c9C/&D+#iA,=gkX3l;:VaP_,+DP#4(R^7].V-bXgAu+62'3TEq-ED1nU-+^$LN/OOCIFO\>[63)JGEo/a/QBF0FGp2%FkS<@""R(ijb;RL!teU0_*DD7p"LVF\[-qJ.QmN0Ct11%"u\BjM&"4?cPL1=C68dt(KhpJ!stF&8A!,IbW_9Y>7j^I(/4XjO-):D%SX;3mA:G&;^U)D**Q^F"4@qF>4e,?E>n\ueZmm8/8mr!:(p\-@MoR[R8gZ=i4\lsC8`;VKr)4Zh%`*,sG/=FRTU\uEPPd_DSQcWi%)()]<6;I@t$R`NU,Vhga:n[TNI*p0Y+NfmfR5UJ<_%E9?8`h"K+"*sXj=k>doI6@74:m[b<%J/bP2AUCARY*:AYbi(@iK`%`q6$4%K>hJOMYp`THY@Olk)!F*Br1cUr1'UGHA6LL3ceSQ^C*;P02P?s3hPGE5U;TU5[%.@1B]RsUc'V$^2(lWnDmQmF]`lq#UYOSra]:i%?)SU\=E"Ks_b#`V,:>R%Ne*="SYso",b7.C3/(0dmb>Dk`=F4clbM^cVr;_u!,]0a_J'BXd>Tt[-<O^u`^T98>?ZU)8)'^L?D>[b%gX4@)f`K=iYc_*n:7jgqQ](0s^@=NRP9U;D=,:01:[0-[N'@61@m8LVPf8/(UqeK/S&i>*k9[Q8+?fNoHZ<7\""ZOB-t\-\oC'Lt%lH(OZ:<//$7!(W03)>j<A5kTMhIN[d`md>DGda&b[_d>XI==&N5f$A;+\SuNkXlEuPLgNN?!9*VTfSc9IU9uY0;d(U5ZoH#])#om%k=&fZ/#Z775IcT1%p"qJM9mfe:0*Ka:iVM]CI<tN+quRu_-_k\D_k#B!)#3UE\5jYn>7KV>/E20;aTr#:9F..LocWlSuJ?aX<@0%%+A3IuELhJ#aL1H#rk`Q*@CXG0JEgmg5i!%2:l.F?)<s5T9[M!LB>S2MRX=,-eB0YC,Jgoe&FjNBUVPZ;P=;1V,@RlMSscQA#\pa8%f5bPOVM_*([0IKs-%-;Qn0aCTX;IgC]]@NQ%C#W8O>3^s,O6)1kU+%['#NHV6bm)"iO_1gY['0PnP^+hL?0Op\Qd42fV75K<ZE]\%A20#qr6[5X[hNf61_:-n[$2>8f-9=sH&,aa=m&KS1B^o6).aSiab`-GS6DV\/7/Oo0`9S,IVVU/a:-pQ$d?(ep:E57p*V:0Oe9BE%-Efak6`0TcTnDqM0n+pFLYs3l;0@qB7/!#^A7)eSNT=(Q):;#gs(4..8HL'uef'[^Ke.qR$Xt[<PsQ<k%=p5]Y4HNhBuYS!rMrs8%,Ij<^<ff.B.].YeH%BAi5R&shkb=]3'!<@#Idp0:,7JR,n1P2ZTiNNGR*k@Bng2?7^=!JG4<p-M$C[o]c\YGkV2*/ZL\"-q8B_?c%'"fDOG756kS1H@&^u([e`;<=UTV,(b$n:9*/8atDK"\3-/<i_BP3>=u-7djaaT@]jH/*%"1&*b-b+]MF]hT?*r3XlXK-VY-Oo?87%_9\6Qc<>27`c*q__KBsBO;d-"Q,ZFOA%Yk'\&:mXZ!],W8d%EjO',g7,)I9X$U9D\Eq?i0qd6/8+"M1t-HdJ]9q(;EZ!h3\dL3mV%/K:\P@]TXa2p6roL_`C3*(O3"+e6SIWtcSJ],2+edRNN'F>fki<KC]qhK3aiap$ed1)4m(UjLT#pg1=jbJjutgd`lRVV\\#Ht=Z>%/4m*9*B`41?P]Ec4?XW,>+oYM))7]SR(P2m;qp+7FU0]eUoMA\Zoo+c3^1LMGR<QZhq;%&20_4A>3:re@](&%KWqKI$].KB4>JfG%j)5D!1(di],UPS#rtiXQM#fWUe'5;3TUkd$87[e&:sLD.[3<Qo&]I\b5k23gY.p1V]L$)YCKT&%eZO95Li`EjU2OStb#U%Q(jJu9%Gj4sIO+CJ?a"%;e5koaB".dUk^6XF"3L5X5[q`fY=ADEAfgSb#XYR:MnH:UZ"CI^_-pF@r#g4l"NeBsSLeo;=F&h<K`[]M,)G+<`%/DVO"SgKHZS'3lCNFl!LD)q[-BM"&Q)Ae>oWD'LJl6eIWFehJlX0Yq*_)u^dp]LbqkZl/(OV1DpH6"YG#4+ABGX1dU?5h09p%`>V%G2:\?Qd"W^c9$4N;*=64j6jA-,6C]'ZD/+-lW%GT]kP69/p,(]'/\c501S(aRQY>Y1<4#sB-9D1C@A6GUuEmK-"Q(X5Z6]mW7=N1%KYU&+]-nM*7G#MQBH!_6mQ4"heI"7/^Y!92Yjp)Y:*aU.KW4[^90e,'(K!/S6'PKBoh%;lZsq@H2>-cn^T.4&eYQDqOVhjeN%5!B%/gB&q@H1;l=aOSbob#kg,>kNr*1084?O4jCG-Gb]Y2[=/74Gs\L4Vd/`-s5)p@ITVCl/UCOeqj4,3?@m0+<umLFKr0A4(/A1MoID%]&PTV1=jT5(tT9]kL++cV/Zi+4:nbP#U9B7g8RNVrW%eWqI0%uAC7qEW3sG?csC.E?i;<]`>Z]-!K2nTnlXps>+DB\.'7#C_bhsU%IUC'''`9#,=Z+IZ$qTN*:?b!N\l5qd@jEJAat^E`?B;35p@j83S3hsj\@0'Y<QLT?2sN%'7OHZ.VOe'gcm$VSE7KZ.Xta+BPEAVD%c'<`RC^F0'OE4&_"=>\8\4F?+obUZTN4!o9<Z4pO._rQaMRaJPC:2L+5?@&&$pq-sJ74i)+*]r:`2"Mneh^q>L6Z44N[1qr?,5tm%TWs7^<*bhKZ<1T>.\`s=Jq_<g+)a7051<u:20bHj5caF\26BLN),d^%Afg$-'hS8sVQBO<hs1NN%`h[`3KLM<57i5""7oBo2a'pJ%qJeVlqd5oQ6"b?qR.p1hbl@kSdepa\$I9WLlX&hhA!G&$Rl)%LH[9gWI]M+qUoa2[UC/l;+ng8[L5ImaW#jj5aYcm0N>63cFk>:$%;7.Qa`Dfii@;?;A`MgU,`<l_-#&n!=Z3J3#O)AP9`oe\5L.Q;"SMPsAm:t[>`4H:>p60<j$pPY^`>7E&]DFJ<l8&9N(`FQ"e5%d&%1AYYa(5/ECL+0Flj(\in,K(<+5q`t$1^nhm>*3W`VGTVnI=,GfVOTR=;&m+g_8ktfK(mWsY+*W/DK\8I]X+(D`P&X1CdW$]J1L-@%c-=[?p,-QTECr<qGJCgPhB]5M8PGPWa6kmt>t'#UU'F$hQoTI;]:*$0)r7%PM6Y+hM(rXZ4hfj63'6uTi1iRThe]&0$_!?<:jNaA%n?I=Hc<2ME&Hs6sK+nI3b-b0fE,3+4Xl*^b[aGMXK]$>V6X^0@*M\^[B#Q5Yj,:/ZCj[J]M:eTZ/.9FqfOJjs[2cq-<ZL(M+UD$Y%"H!WX/ZZf24/lO$F>AN8ME=CQ8%MA8(a4XE,fns@>3L2kNM(a.f?prgf3YVL+YmjgU@$tPY@*O=(//L!nuN(8l=C=r<ZIQA"d7qo%;$.,8YroW1>h@>4Dr@lNml=_;fCkSKUh;E;r;ubp^?A6POPa(].)>_&p2;U5%^,c_q&8,H^kA#;da%J03-D>3DbMhkYDWfo+k.h-%W/[Lle+Fl*f1RlKrm$6r2Of8ElLK2hCJ:+cEo9?uG>^3%R1S6rD:/=LLBkgfQPb(:#f"6^c0R@[qQ9*PNelS=h!1i[6-Q#CB8/'K%!_/s_EKUP"r\B\tb0UY;?*D>j"/4Wu7d2,-@LD%,Y@tF/GL/unX1gpJjdZ,EnAfhscQ%u%Y?-TVmjF1eoB5t<VA38T6!d^N,U>UX%@PJ/e6f`S+Gn-b&m6@-!:A3A2Q`bn^fg@G:B=M;b,Uqs$$nAQ7QuA*8+X<T]P3[^%M%1iO5\NFp[kYh_[=hMm?T7#J/\8Z3R9&c3%Q]ae=PFN:@?B(gUomYsCN1J_ePXb1i%(LPK"/`%?grCo,*i$L6Y46T?9(bRJ<W&\,24f)s>rN60"/kUHB4GZ*r)J6oBVeAs\WMUY%)Qc+@#]nB,j4p)k*0YZ`&u6s=YrRZFW$&YF$9Jepl'(J"<WHXtE#5^Z\]g-pb<'Q"$8P;Xs7!!Zs7!ojGdsk(cO2&L"bMHX7JY*k%N@rN0/>t89&XqL8k1]A\%3LtR/ub<Qrj"9/c_2(f^lKnal@UXi=Y!rg)$\cFC'GW8)#8gESB0"=A-$n5]str*aUUkgB6I4*buPiA%n0a%(E_r-e)d<Kk5R->4_opK2#NADTkKeF!AqBSCs#Z;&&sIK0K\F7_''%/54"Q(8TH2TL[t3gQDTP&L_qZOD@S_7V?g<72=)jh^%O7.N6B5R2sL\ops2cPIATjj]7k#Ad;/472=[&qAPSbH?>LuhX;hU=XBj$<$*5-s-[AN&LM?UU4OnoJT]<5Z:?fYkC-&Un!(@L/8>%'TA3q<KC,bElirARjD]'VJtXPEQ7pJ_?O0XpBI1Z'TsQAU%0b_@3LOY624Y>(4YL5S.KA>Da[!OB0B+l@r/[QBYRFR94o?R]Q*er%G:P\-(.-ZHoI"$B.<1Shek`)5MWnZoO_=.d?X:.&hS+3b7Wi`HqSBq+NCYH.<S&%'b,?#O+\IE?G^l<DHP`W&Hk)-(NUs!<hrjN7%LV&;Xm'0:MDp$*!Pb7o?T:PNd;HNpVC4S^C[sVE&r8+W]TRGFS+bs`B-#)<sF+kK/-Pr#ej2rTY[$k]ji(`O*\o3Ys=*2rRm$)_,%,5f$0`=Ufc;5+2pkK)@UlP\hB5[P/13.mg19\DSW7#6Q\_:itm6G1G?>6SPVfH`p2!tZ#$,%WnaL(3i\@OBomGPJP2_Y^/n>l<MG%Mm/uFEg.Mt^b5%p3+&0#@3,a/;K`E?Cpd:b%7M[]Fnu-J<5>61:6lZ4BqFq[hEl+6#abPgSaA/@cZ.$--]-&,\G@*5*CgE;pa08X%OiSffmMVbeq1h!D#mVZ:0atVs,Vk,D#fEQe*;X]@EZ9bNkL(i?e&W^(5VW$<",DgY30$I1bRg^`Q*lY4;B-V41<VE9iQ+c2$VP3(%)IU!_Zr.l!"VHSb_%>KZ`)iU6AB&mKnfXX55/`UW(7B/mjd.5J6eBtQ6me$AOXV+uZ!kau%(*TfNDk.,!SUrcWaRW]'mEP8XQ*!D%L%B#ILAEI>kNa3u\hddXJRCb[$lai6.;TdPPQ_Y%9#8ehKmmN-o57lg<5ouKr8?!/Oo(=u-)@@W'F_;q"b*]YK0!$I1,bL1GKIc'%Wd4.i*@$D-`l%kh&R-83Q)L<l'I60pZ%J4EW%d1jS(PR1&;?)9!BN[a1B,DfGjsdkU4q;LLe%XUG&aHg^kkBin:%]1+_+0i,s`5#%el.9;Y\<cd4uTBHUUI]g2B'@1erlH!nC9-%Ec;.<ljgfJHlW4sh;>,e[#>f_g6u_6r+`bu-3u@(@C2?t/eNFtE3+R7+@d9-`t=DA%E5$8oAB=AX`t/F7[<-?ZM2_pg,f^Te-U829h39?"A(Zg#QZ/hVObXskn!+E\mV(eL:ro4iBd&^ACQoL*1>Y'@q-)Ne0npnE$QRKU%6p=dX.+Cp+%cU%i:4PgKdP$F^HiL'k@AD#'aUWE!T#1)k@5Z*!L#Qph!2q]Frtkmn0AE^l52d6Lj9WW]NrcTS3_,#TOC/p\9:Yu@%ni5qaIFdXYq(f@pKeGRdE<,/oY\4H.Gf+$1/7](1^d](X%u3BE.mBfIT4,2V4Vm%d`6.%7_%:Q:#f8NT`-TbI+2`Ii(#Uo:L6;d-%a0cTr7A+a)$%"d(;)Q?j.MMR;`g);tLs(g-]]tmnOV*<K/I8JC`$CZb^GnhRfmYPOfeVu34dTJCX.IF)nYQ[ae0W=%r/BpBXkN^\%Wt4'8=F\Y83]taBC@RN^Dd%F(`p]rFeDGS;K8p-LW/bLNW'_dklp;qqOIO7:RCtAoR,WaN-S[SgXX_Ps9qb,-q&snD9/_;!c=Tu=%*_?hs^rZPrMB0h5(^McCFsb6CPR!J_d8RHaGSH.&BK/jU&67B]-@U?hPKh\6'[Q%0\<c'[cqD"k2]!;D<%D8K)]2*"iO&sEap>nd%ZD1nGHQ]&"'\5egBk/*)6IQn,%lZPPlPo1p[N?W&UT`RgShDkipKeDXmX5&)Q'"-SN8A)b4SKT5mht$HGda(+'_kG$L0*0)$,m0P%AC#=11eQ&0g?2rsSL8PD=rFMb?Y*98;*WCIe6.sjM5cC>r^*=k7DM6Cn`CN"@fu4Z6&Cd:M-M6q"n@GoPD[%],j%`&jd:crcb5p]%jk);kD-90(jPSrZ1/$-8$NmfD,<<`EccU!ICh=p_`-1nG(:ha"$@,Ykj,:1<V*u<@MNE(f@R7,/0Ch\;N<H^Hq]iE)L!S"E)m['o%Bnq[pZ53Z)]baoKmhrS9T9Fs*r2q7%=$@CZN:`@j'V\G+[@T*-`\LAgG)&%W"LB?p&AujDLqPT=`p_ku,su.h&IC)2k^$qW9;B3,%8<-<]6DV)Q0#b2J6#s3eVZatrM*7JIM)B?>?VQ]AD^s/F`:EfuF[=e=H2!)BY><[o&#2UJ83@^2W4%R<R,Yj@ps(-o9PecP$A)Ej%0RH`"9fS1\f2U,I><-cKMcKH(D$+r=h?=5jZB24E0!5`!JLD@2Jo6no%\J+k=B:##o+]?uFb;H!;-F10pk"1Ok$]OEnilQf"+d^q%NlALAZg[.M7@cue$lZtpD:DhW_raEC8JE`/T/eZrlY%=grK*)(7)>>@1MLBHaE;@L4aCT_lLI3Y,$Qb*aHGLugkis[%D!#*V\hS%%%^VKhbesZ6nd2C1VhB_p2OSTr*_@2e@qQ`aD%q?`kYs0$7P;H-"c'H.0u`'%1aLSj:`q]NGg)];k*FpJkHN>k7)tL2b\/#Q'hW$R%K7[e#UiX)VZ^!qGN+3TBQ14Bhm'^BPR1UCq^0'$Nf^.ZW2I=EFC,BZN/Wf]lJgbNIa.QK#TJF<&Hm3'Y+];DY).KN.7i%s(JkNm-%ar8hrQYt?o^hNZC4P$o")r?IW6s5G@3QM5HUojoSSM:1M7L9[2mLBd<KhNFMKb)H3,=`q&WP&sTDll"Lc%4aIfopSp=/il5%D*IU%'g(8@H27<HB2qT?1N`jrWscpfrBs1VdCoh)6XFIG)$WeV[ZLUC"(<.V<jl`uWO+0mMKnL17a?&()M_M/Ya3l7CicJQ&4OAL+mW(G%Jf:Y/S^QdXA:'/+g.'Z^HnJSSkWp+;c0i!SZ,(3Hmd,5+\r;12g>u&\Q,X/\n#@^/[-II6dIW6OUTRuZ$MGfq?]a)Lq0=7(]:QI/%!U?IVM;:<bgQ;#M)0+jT$NPR!-^NCGnXbq&5t[!!7UE;46C&7X]Hs:SG@G(OoK'7+F-t1:]#$mTq:G@bAU_"Ep9<XlH0)M@"O)S\%"<80nM8qZF6ot!"gN8HRn"f0Bg9]OVir%O0$'g6;S`UaUfQ./4SUbmJ`6r?K(^DN&%]1Cu&lj\A]&8L3$e']ES@YL=N2au,mR?@"%Z(?rLj.EX,hm1ai/;6VqKS!F5&8uoX>>89&VW@[(b!P?2f>`U!2[h8u,95bGdu`?%340Y;B>/(bYGGuMB30)UU/gS\cmol"oSNeS%^#Fa*Sc`OqU%^prNV4>u"4Ti5&X/mRV,&[MNgikHbAjc8Vl1S&/JTG6/1M`#M,GN3[mY7B$KDWfX^Z6uS>n>FlA@rFRlRR8/p9Us%M<'Q-*>FS4(iB:rBp-Y.mf0_gh6kBp%=57RnCKKOm"d8W@.Ci7Efc,U)kCOL3sC>"0mJHO\S2iE\k+9X-["8+/FcXJM$^C>FrKL7%EUPB$EX"=R\B&%^4`unKCqKg,5ofY.eJQJt+td8'.u:^eB#^%Md.WK+[5g!CV1*H/aAs[S(Sb'o/oZ[nEHfFKYQf;8#3J0F8H,.(%"=G"f"pYKj#6i5qX&oeIa?X6oPM\Obh9=8'V&WjD<n+CC(GkUsTEJQNT\;+P)6..%J2PEc\7,1*UfeWq?/<LUd=RM,Ib`GlUl6?'%=0:i,jK_]7F5+Pu^qeT-8^3B5C7].pK)0OSLJ3lUfdgQp/+'&_Nn'M-9KUY&E@*PG=JWOtdic:Q8\-ehV7B_Vl<&GZOfsP86+bqM%mr1cl;..LAV]oF@b:6]7GU(o)IQt2\YJCba7)Yf'$h\:<Jhl/626uR4gfa@H2@RjXI-sk$qQ]Bt(;X.K2B!l2[m>ZF@F=MFa3\M_%I^I3D/VIJ40p(5Y%!8&A46HTO..(99)Xr3C>t2I%V*kRnEZa$\GHK4]*fBQ?4P4@P^mE4M[=^ob@Lp#:F&F^[.pJ;XHdM"rAZm\7%eQ-C*'u^h[C0-/%`<U&mls?gh@#Ou\Hfnq0&KSs)(bBfqJYSn3D:fJ5#B4\mFr#r28p->JfXL>96"PPOe-6`]ip\6@IPr?+"q6@G%8X$uNO8MXb=5G6t$,.a-mb/m&mYOB>d,M<rNI7CYY3ft(K'Z6P3JlV21fV)E5ueMSCW/W$I3Dc\+[^FF2h+O9R6:]hX]@&MI+jn"%V?+7!<T(p'WG'77or<=6kfBB;ZEFMqfnQ*3-)=CX;]cpmM4$@5]6Q(7FY!fo?O0IV/s/\3^Z5E>P[E*>@=Kda:Nl3i)1GP\DO<k>%`p*h5\:\)kO^L_4O/,emQ\T7Y)LkKqk8Aou4oW1Q-H3Z*88s.!KP.?R.ijFO@arPW=A1[_/"/X\I@KT>Kt/bCLkI-[BfPd46;gBS%%-$$?J7rP.=VPB,Q3pM?BdnejN(j=2N2Tqc`/,jZT&0h>3t-aG<n58gTc2jG>9`+KkCDc:p.lu%?;XK]O4GG,s's#m_u2lVV&)HU%bi2Z'rGcctE=Uu!b[M-cHU>6?F*?Y[H9G$9*2P]Fjgta,iZ]KYjB.G52Zl)%BZr9dpuO+6&-VZa*Ku9B-..:?'#j=s,YGYQCke7e%O9_ag@'bt3P.SUWERDn)29U%g'Z'nXP'r79IsnF-,X,itIc6lueO`ba:iUJ+f7VN^Q3@b:EpD4A-:9!K(3,,,I.!M4+NTQp#Rn89%^EYoq$<F2cp>6c[dUQE'DP.Os,j'<dRPlF-;J?d(kCPLsa;aQ;@41+dG[;<7K0-]98EUjb_62jYHb*nB,uN3-2[mHFM*FE@/j3;N%8*KE!Llnd8I1qhaMF:?bg!=)<8AR;:)Vo7,P3m'3>!+6L;3J&'gdPKA<2d7s82Z;,Xf,%'de458:F*]Y@bAZlI2o6;?HP'q6a,#)%b0^=1*.pF\-QGV"-BA\%A.1d5b/VSk#8P*Ub_S6+FAf8$M[(ENV.ep+!qs-phOXjldmbdgoN_%D_O.Q)O</@D10:tLjSQ4GLVIMa%HHWZqaC=_m.#;D25_![A)2sB.)(c)NX@M=!DA7L;<uU9WihO8s5'sBoX4.K34;UT8$:6aDN7'K(#uX=D\6`SJH]B/N>4qht%9FX^%fi%uV3(_,CcU.*(r18LN5:_J&kV)2mGB8:SJ8Tdk83eO-UU_8I>?r?uZ=#<Z-5&Ocq?3RU2Z2i&%?V^ubhS;_lt6Y1Lp0+OXL<>b%RbUW'0r0:\@mS$A;(1>2l.Ue2^8P#n!-,M9i=Ku>1uq'"fLN(Z&l51'\_7<toCAW[mI4o+3iQKQ$-?Iq6'g3mdR82'fP?42lXNUp%H^<anGZ#ke55sc("tTLWd^D^qgno]Sl!QJ1Gg$Unn6ZiYdr@`q\fhnIZ8^KO/$hLN7<aJW-4,g9@$]t4i&'5W@m\/ud<>Q'dOGHT%8&#5\iomG1qFTc`gnN@o`%9!FCu<*K<\QZ$H[57"#R39=\&G*[:lAA3=Yha4#$b;!WSn[?1%h8;;CqPs?7-<BIQQk8iA]q=e"I[^%nqq&gB"=N1"oGOHiHg<NV[/g_2/\s;C&e8-PaqD_PFk@F66RP3'8HDM$jh?WM+U1hoTs#.Q<<4.hh&m'(HM'=l^@XF^+ER^$r2J_%)WHMF<'l7JP]F'aY>0qkC2cYTn?^+1GiqDgmqIoKa+F4i0R>_i%),O^oTtN9'0`0`8dp=ZmsK$6"rP@5?Q23N)6_%o#T'!dle.T+%jK]\uK*AM"b&^Ua>;g"#B`Z/O8;P,s)%<RW^J:C<B+MP6g5/*TX_MuI]HLYSp5n[Ho-`q,Z&!SkX4XfrNKUS_:HGFh22e"EDjm<L%E5c8h7S,=h]s0?$-`_p/>.3/L=[S><\;'T`"QfEur#51m"YV$0^r#j)50EoNX[2M'6o(*br9qr`V=<)?_.R:r-id@'"98g]!2(KD%-t`P,0LUO<!,+W2kVLm<(&Ol7\aC(QG4N7H#l.XG+_7>qbm[coZVmPb0,-f:R0>s=f'<J5nuV4K0!'3c)+2/^HRWn]qKo:=h-\gB%k:>D&>ac`8^s09PX`F#kIM[MV=.gC]I6YcshYYHc1$EWL@2+I]@8,\'PBZ;'].dl_>RppYarIT&bWmcN6"Q-U,XdeB6taZ!'lBEW%!t.FV$C.qr?'c$?VC[^/6[P]H*34(GA^)O5G92itlg[?'g9iC(o=3.L6)>-eeU>L@MJ4PjLa?EKUB\g*%F)?MQQHk_Vh5Gcl>QX1%YP6.S$F:XBi:WhP57W!fm5uA3?XNR!9e5$:nIHF0C\=Mpf7&]`n.rd/^ia:S,\CWD+137i6TMuiPaV(%Wf'_>DZ!CY.8WE1k_,bC%rD9I^h;0Fg'Np]X0rskCOIG<F5P>I>^,Z[Y>.'rZ4%PBbA6*8Nbc8$/C$1MVs'oi2VF>s[P_lV#o4)a$p%`mWW\c?@n0p,p1,7ok%p/CZ:c>U<pJMT5VgpA@i.?7K^M9)_k,kEJnLAl?H,PP(hAk[B_l+&tJ.\56LJjO4kT(>eIoD>,IQ!LP#-A$>8on++$pKp([*pf<V%r/sHa(D#C?#VZTXI)eZ:`fcQ/d`.Q@:9BVXJ[!#o&S^:JKFVsBY+HcU*7f]&jEmjIr*pc[7;%Tbof/gq8@-</m(&>9A?5FTFhPd3%`S*:Y(9&H<Jr0k1,X8JA0aNd%cPe4D<oTNJA'd"l`-F@+gobq-lStEc/e^O@L=?)@7XkkE;Bk<r%iC*5VTq<_N'*2R+_"r;oL.&[%>Y67i>r^:^<\%8l(`/YlrLR\,0-3KtT^*C/0_7Pgeh%Y6k(+@$+Vl+*E]fc8S/:==(a;mZKSgefQ\cj9%doo$5oaCq6gnrgW0)Wb%H"MUEGM".\UO,Q'(_7`M.<EVq,J@iaD0e5&`;gT?XEasW,+3np9K_Ji>O>jD>.=+=3a03k9&j0'R\KN2a:o/l>0miVVYd:C3Hn7h%JW8ehntEbW'bTt;_.!u<OU7%&Q=U1QQBp1=6g\PS-a*NMOTHhi]6snkls(?dR6E^HCuR6+&&c$PS:iZh5RKuh4A5+:01nPmq60/Y%8G*[6HI4h"'5*LCqD#D%BKRF#QI1uV_<n0OP,^VUiujBRq+(Um22FE0$]#D:1_@P992QVKk7.X$jIa.EW8kpJrg+_hO8nY*s7jq?%onS$T:$WlA5CP_Er*MWe?[C]?VSBjWD-uG8>D9`=F4n*gZ2(b]KV#`h3r.['2f3dkYuU8[et%$+hdu%-kL`6?VH[,Q"G9R-[9D80%pcYWp_QMXmOH-Rj?0D&fQhK3Ok7M#qD4)-^)g0K41iMaH[>rJfAg6ctDT4&nXmA0[jh!$^mb=R1d"Mqa\:^)S"qeL+#)m&/#CI2m%V]#]q'A^k41R=p&"KY,#lF8oS5gZoU07m%Gdq3BV8?4Nj7uJZfVck+'=8R%iZP[QopO@-Urp;f=qsFD.*$:n`WO0LnP?3CFOXKn5%%G,LDo$]/GWC`n)s#r-6\L3,VI6irNih[q1G=+)hJXoUp]N:oqb*Zuo^UUm4'/&%VJ*Pas``.@l%;5QaJ)81S(iFOLXcQl/S*2?=%glKBuX.A&jf'@0teq9fQKj9h]qn08#q#QQ"R@BB6ncn9sXD#"&3C%nSo7GJ]VlY]42&*G5,YN%gP2B?G(^3fgj@GF&XcB;dG)TXs%d#-FkCM$>$<11KGk6A8?i.k5D%OSCoH*JR9eZ2XU)>P6`&L.Q3'P<2a;5kZSCSm,Rftn`lrJKnk-]4N+UfT:%f#Agb]2OsL7r%eZ%s4)(Om&lnj85GT(lc'aKRE4&his3F8\r+Ik3B,eEPb+&&_Y,>pb>q?J/4E`^?YPX'*\V0,`CiGgVYtgbe-G7*.]eMh";uaEQQL@Z%C]Bb1^fL7EV`hVMf?Vo./g*SCOq9@P,Xr,KH]sAk."JE%&`ZIj@&ltWgB8#@h"L!Lo2;N_!%p<s'Yjl]Wd>\Q7i-KJnLg!#!&iqi%KV4t<[S`%5)fcH]k7e9]B"-:[kO;=s1F<:0%6RO<>)nX6+.7>%_7p]gE'\Y27uS.tp2dB17.+h2LE)3RfY6d1H&W"]e.'[";+V8U%*'80@kP14Dm=Bcipg[dWZMM$P:fD(,I*QIeRC%oZ$n"[jlEQJpE:W"@0P"QNH%j0sdj"?T$RQq4DXnpugpN7Z,O@52-I9X<14,E`%Ic(sMjFl4IY1,Iig#VjLOQjr)C:`%I>;;J407P)uS-fJDaku/3)D%fUjj$jX-hmFG#D_DOKecNB9V][->FcO"QBNUT*&.S4eA]<=%QBP;a_;(::AGW!P<@M%4hCJ29T<i<Vdm*eM_ck34\Lkcb^AZ(oIeOr`e+iB]s/1ABp<3L7m4Wt`G<c#nGQ7K*huECWrpn84r53H&%q;M'trT.t4rV4R.rq,B'rT.C9qqkc\oAf<>o%ROOp!8-`mDm!@O$EXd6bXUMoABN7n,Mo"Ie\E`1#U:~>%AI9_PrivateDataEnd